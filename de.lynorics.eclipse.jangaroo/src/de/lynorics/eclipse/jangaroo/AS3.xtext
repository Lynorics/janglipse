/*
 * Copyright 2013
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://opensource.org/licenses/eclipse-1.0.txt
 */
grammar de.lynorics.eclipse.jangaroo.AS3 with org.eclipse.xtext.common.Terminals 

generate aS3 "http://www.lynorics.de/eclipse/jangaroo/AS3"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model hidden(WS, ML_COMMENT, SL_COMMENT):
  package=Package
  |
  imp=Imports
  members+=(Method|InterfaceMethod|VariableDeclaration)*
  classes+=(Class|Interface)*;

Package:
  'package' (name=QualifiedName)? '{' 
  imp=Imports
  directives+=directive*
  members+=(Method|InterfaceMethod|VariableDeclaration)*
  classes+=(Class|Interface)*
  '}';

Imports: {Imports}
  imports+=Import*
;
Import:
    'import' importedNamespace = QualifiedNameWithWildcard ';'
;

directive: {directive} (
    "[" name=ID ("(" annonFields=annotationFields ")")? "]"
  | uses=Uses
  | ";"
  );

Uses: {Uses}
  "use" 'namespace' (type=QualifiedName|'*'|'void')
  ;
  
annotationFields :
    anoonFields+=annotationField ("," annonFields+=annotationField)*;

annotationField :
    name=ID "=" expr=Expression;

QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

QualifiedName:
  ID ('.' ID)*
;

Interface:
   access=AccessLevel? 'interface' name=ID
   ('extends' superclass=[Interface|QualifiedName])?
   '{' members += InterfaceMethod* '}'
;

InterfaceMethod:
  modifier=Modifier? 'function'
  (
    name=ID'('
    | accessor=accessorRole name=ID'('
  )
  (params+=Parameter (',' params+=Parameter)*)? ')' 
  (':' type=VarType)?
  ';'?
;

Class:
   modifier=Modifier? 'class' name=ID
   ('extends' superType=[Class|QualifiedName])?
   ('implements' types+=[Interface|QualifiedName] (',' types+=[Interface|QualifiedName])*)?
   '{' members += Member* '}'
   ;

accessorRole
  : 'get' | 'set'
  ;

Member: 
    var=VariableDeclaration 
  | meth=Method
;

Method:
  'override'? modifier=Modifier? 'function' 
  (
    name=ID'('
    | accessor=accessorRole name=ID'('
  )
   (params+=Parameter (',' params+=Parameter)*)? ')' 
  (':' type=VarType)?
  (body=Block|';')
;

Modifier: {Modifier} (
  static?='static'?
  & final?='final'?
  & native?='native'?
  & dynamic?='dynamic'?
  & access=AccessLevel?
  );

enum AccessLevel:
  INTERNAL='internal' | PRIVATE='private' | PUBLIC='public' | PROTECTED='protected';

MethodBody: 
  {MethodBody} '{' statements += Statement* '}';


VariableDeclaration:
  access=AccessLevel? 'static'? ('var'|'const') name=ID ':' type=VarType ('=' Expression=Expression)? ';'
;

VarType:
    name='void'
  | name='*'
  | type=[Interface|QualifiedName]
  | type=[Class|QualifiedName]
;

Parameter :
    'const'? '...'? name=ID (':' type=VarType)? ('=' lit=exprOrObjectLiteral)?;

objectLiteral: {objectLiteral}
  '{' fields+=fieldList? '}'
  ;
  
fieldList
  : lf=literalField (',' fields+=literalField?)*
  ;
  
literalField 
  :   name=fieldName ':' el=element
  ;
  
fieldName:
   identi
  | number=number
  ;

element
  : assignmentExpression
  ;

exprOrObjectLiteral :
    Expression
  | objectLiteral
  ;

qualifiedIdent
  : (namespaceName '::')? ide=identi 
  ;

identi: {identi}
  QualifiedName
  | i='use' 
  | i='xml'
  | i='dynamic'
  | i='namespace'
  | i='is'
  | i='as'
  | i='get'
  | i='set'
  ;

identifier 
  : (   qual=qualifiedIdent
    )
    (poi+=propOrIdent
    )*
  ;

propertyIdentifier: {propertyIdentifier}
  '*'
  | identi
  ;

qualifier
  : ( propertyIdentifier | level=AccessLevel )
  ;

simpleQualifiedIdentifier
  : proId=propertyIdentifier
  | qual=qualifier '::'
    ( piden=propertyIdentifier
    |   bra=brackets
    )
  ;

expressionQualifiedIdentifier
  : encapsulatedExpression '::'
    ( pden=propertyIdentifier
    | bra=brackets
    )
  ;

nonAttributeQualifiedIdentifier
  : simpleQualifiedIdentifier
  | expressionQualifiedIdentifier
  ;

qualifiedIdentifier
  : e4xAttributeIdentifier
  | nonAttributeQualifiedIdentifier
  ;

namespaceName: {namespaceName}
  QualifiedName | level=AccessLevel
  ;

arrayLiteral: {arrayLiteral}
  '[' list=elementList? ']'
  ;
    
elementList: {elementList}
  ','
  | nonemptyElementList
  ;
nonemptyElementList
  : assignmentExpression (',' expr+=assignmentExpression)*
  ;

// the mother of all expressions
Expression
  : assignmentExpression
  ;

// This is a list of expressions.
expressionList
  : expr+=assignmentExpression (',' expr+=assignmentExpression)*
  ;

// assignment expression (level 13)
assignmentExpression
  : conditionalExpression
  (op+=assignmentOperator aexpr+=Expression?)*
  ;

assignmentOperator
  : '='
  | '*='
  | '/='
  | '%='
  | '+='
  | '-='
  | '<<='
  | '>>='
  | '>>>='
  | '&='
  | '^='
  | '|='
  | '&&='
  | '||='
  ;

// conditional test (level 12)
conditionalExpression
  : logicalOrExpression
    (
      '?'
      cond=conditionalSubExpression
    )?
  ;
conditionalSubExpression
  : expr1=assignmentExpression ':' expr2=assignmentExpression
  ;

// TODO: should 'and'/'or' have same precidence as '&&'/'||' ?

// logical or (||)  (level 11)
logicalOrExpression
  : expr+=logicalAndExpression
    (o+=logicalOrOperator expr+=logicalAndExpression)*
  ;

logicalOrOperator
  : '||' | 'or'
  ;

// logical and (&&)  (level 10)
logicalAndExpression
  : expr+=bitwiseOrExpression
    (o+=logicalAndOperator expr+=bitwiseOrExpression)*
  ;

logicalAndOperator
  : '&&' | 'and'
  ;

// bitwise or non-short-circuiting or (|)  (level 9)
bitwiseOrExpression
  : expr+=bitwiseXorExpression
    (o+='|' expr+=bitwiseXorExpression)*
  ;

// exclusive or (^)  (level 8)
bitwiseXorExpression
  : expr+=bitwiseAndExpression
    (o+='^' expr+=bitwiseAndExpression)*
  ;

// bitwise or non-short-circuiting and (&)  (level 7)
bitwiseAndExpression
  : expr+=equalityExpression
    (o+='&' expr+=equalityExpression)*
  ;

// equality/inequality (==/!=) (level 6)
equalityExpression
  : expr+=relationalExpression
  ( o+=equalityOperator
    expr+=relationalExpression
  )*
  ;

equalityOperator
  : '===' | '!==' | '!=' | '=='
  ;
  
// boolean relational expressions (level 5)
relationalExpression
  : expr+=shiftExpression
    (o+=relationalOperator expr+=shiftExpression)*
  ;

relationalOperator
  : 'in'
  | '<' | '>' | '<=' | '>=' | 'is' | 'as' | 'instanceof'
  ;

// bit shift expressions (level 4)
shiftExpression
  : expr+=additiveExpression
    (o+=shiftOperator expr+=additiveExpression)*
  ;

shiftOperator
  : '<<' | '>>' | '>>>'
  ;

// binary addition/subtraction (level 3)
additiveExpression
  : expr+=multiplicativeExpression
    (o+=additiveOperator expr+=multiplicativeExpression)*
  ;

additiveOperator
  : '+' | '-'
  ;

// multiplication/division/modulo (level 2)
multiplicativeExpression
  : expr+=unaryExpression
    ( o+=multiplicativeOperator
      expr+=unaryExpression
    )*
  ;

multiplicativeOperator:
  '*'
  | '/'
  | '%'
  ;

//  (level 1)
unaryExpression
  : in='++' expr=unaryExpression
  | de='--' expr=unaryExpression
  | '-' uaem=unaryExpression
  | '+' uaep=unaryExpression
  | uaenpm=unaryExpressionNotPlusMinus
  ;

unaryExpressionNotPlusMinus
  : 'delete' postfixExpression
  | 'void' unaryExpression
  | 'typeof' unaryExpression
  | '!' unaryExpression
  | '~' unaryExpression
  | postfixExpression
  ;

// qualified names, array expressions, method invocation, post inc/dec
postfixExpression
  : {postfixExpression}
    ((peexpr=primaryExpression)
    (pepoi+=propOrIdent
    | '[' expr+=Expression ']'
    | '..' pewi+=qualifiedIdentifier 
    | '.' '(' expr+=Expression ')'
    | '.' e4x+=e4xAttributeIdentifier
    | '.' '*'
    | args+=arguments
    )*
    (   in='++'
    | de='--'
    )?
  );

arguments: {arguments} (
  '(' exprList=expressionList ')'
  | '(' ')'
  );
  
e4xAttributeIdentifier: {e4xAttributeIdentifier}
  '@'
    ( qual=qualifiedIdent
    | '*'
    | '[' expr=Expression ']'
    )
  ;

primaryExpression: {primaryExpression} (
  '*'
  | 'super' ('(' superExpr=Expression? ')')?
  | con=TerminalExpression
  | lit=arrayLiteral
  | lit=objectLiteral
  | fexpr=functionExpression
  | nexpr=newExpression
  | encexpr=encapsulatedExpression
  | e4x=e4xAttributeIdentifier
  | qual=qualifiedIdent
  );

propOrIdent
  : 
    '.' propId=qualifiedIdent
  ;

TerminalExpression returns Expression:
    {XmlConstant} value=xmlLiteral
  | {RegexpConstant} value=regexpLiteral
  | {NumberConstant} value=number
  | {StringConstant} value=STRING
  | {BoolConstant} value=('true'| 'false')
  | {This} 'this'
  | {Null} 'null'
  ;

number :
    HEX_LITERAL
  | INT
  | OCTAL
  | FLOAT
  ;

  
xmlLiteral
  : // We have to have the LT in the outer grammar for lookahead
    // in AS3Parser to be able to predict that the xmlLiteral rule
    // should be used.
    '<'
  ;

regexpLiteral
  : s='/'
  ;

newExpression
  : 'new' fullNewSubexpression args+=arguments?
  ;

fullNewSubexpression
  : ( expr+=primaryExpression
    )
    ( fnsd+='.' quali+=qualifiedIdent
    | brack+=brackets
    )*
  ;

brackets
  : '[' expressionList ']'
  ;

encapsulatedExpression
  : '(' assignmentExpression ')'
  ;

functionSignature
  : param=parameterDeclarationList type=typeExpression?
  ;

typeExpression: {typeExpression}
  ':'
    // TODO: identifier allows namespaces, and I suspect a type:spec shouldn't
    (identi=identifier | 'void' | '*')
  ; 

// A list of formal parameters
// TODO: shouldn't the 'rest' parameter only be allowed in the last position?
parameterDeclarationList: {parameterDeclarationList}
  '('
    ( params+=parameterDeclaration
      (',' params+=parameterDeclaration)*
    )?
    ')'
  ;


parameterDeclaration
  : basicParameterDeclaration | parameterRestDeclaration
  ;

basicParameterDeclaration
  : 'const'? name=identi type=typeExpression? param=parameterDefault?
  ;

parameterDefault
  : '=' assignmentExpression
  ;

parameterRestDeclaration: {parameterRestDeclaration}
  '...' name=identi?
  ;

Block:
   {Block}'{' statements+=Statement* '}'
  ;

Condition
  : '(' Expression ')'
  ;
  
Statement: 
  Block
  | DeclarationStatement
  | ExpressionStatement
  | IfStatement
  // For statement
  | ForEachStatement
  | ForStatement
  // While statement
  | WhileStatement
  // do-while statement
  | DoWhileStatement
  // with statement
  | WithStatement
  // switch statement
  | SwitchStatement
  // get out of a loop (or switch)
  | BreakStatement
  // do next iteration of a loop
  | ContinueStatement
  // Return an expression
  | ReturnStatement
  // throw an exception
  | ThrowStatement
  // handle exceptions
  | TryStatement
  // handle 'default xml namespace = "foo"'
  | DefaultXMLNamespaceStatement
  // empty statement
  | ';'
  // assert statement
  | 'assert' assert=Condition
  ;

DefaultXMLNamespaceStatement
  : 'default' 'xml' 'namespace' 'assign' Expression ';'
  ;
  
DeclarationStatement
  : Declaration ';'
  ;

variableDeclarator
  : identi type=typeExpression? var=variableInitializer?
  ;
Declaration
  : varOrConst variableDeclarator
    tail=declarationTail
  ;

varOrConst
  : 'var' | 'const'
  ;
  
declarationTail
  : {declarationTail} (',' var+=variableDeclarator)*
  ;

variableInitializer
  : '=' expr=assignmentExpression
  ;

ExpressionStatement
  : expressionList ';'
  ;
  
IfStatement
  : 'if' cond=Condition statement=Statement
    (=>'else' else=Statement)?
  ;

ThrowStatement
  : 'throw' Expression ';'
  ;

TryStatement
  : 'try'
    block=Block
  ( finally=finallyBlock
  | catch+=catchBlock+
    finally=finallyBlock?
  )
  ;

catchBlock
  : 'catch' '(' identi type=typeExpression? ')'
    block=Block
  ;

finallyBlock
  : 'finally' Block
  ;

ReturnStatement: {ReturnStatement}
  'return' expr=Expression? ';'
  ;
    
ContinueStatement
  : 'continue' ';'
  ;

BreakStatement
  : 'break' ';'
  ;

SwitchStatement
  : 'switch' Condition
    switch=switchBlock
  ;

switchBlock: {switchBlock}
  '{'
    (case+=CaseStatement)*
    (def=DefaultStatement)?
    '}'
  ;

CaseStatement
  : 'case' Expression ':' l=switchStatementList
  ;
  
DefaultStatement
  : 'default' ':' l=switchStatementList
  ;

switchStatementList: {switchStatementList}
  statements+=Statement*
  ;

ForEachStatement
  : 'for' 'each'
    '('
    fesfor=forInClause
    ')'
    fes=Statement
  ;

ForStatement
  : 'for'
    '('
    ( forIn=forInClause ')' fsstate=Statement
    | traditionalForClause=traditionalForClause ')' fsstate=Statement
    )
  ;

traditionalForClause
  : a=forInit ';' // initializer
    b=forCond ';' // condition test
    c=forIter  // updater
  ;

forInClause
  : ficdecl=forInClauseDecl 'in' fictail=forInClauseTail
  ;

forInClauseDecl
  : Declaration | identi
  ;


forInClauseTail
  : expressionList
  ;

// The initializer for a for loop
forInit: {forInit}
  (decl=Declaration | expr=expressionList )?
  ;

forCond: {forCond}
  expr=expressionList?
  ;

forIter: {forIter}
  fiexpr=expressionList?
  ;

WhileStatement
  : 'while' cond=Condition statement=Statement
  ;

DoWhileStatement
  : 'do' state=Statement 'while' cond=Condition ';'
  ;

WithStatement
  : 'with' cond=Condition statement=Statement
  ;

// TODO: block should be optional here,
functionCommon
  : sig=functionSignature block=Block
  ;

functionExpression
  : 'function' name=ID? func=functionCommon
  ;

terminal HEX_LITERAL returns ecore::EBigDecimal :
 '0x' ('0'..'9'|'A'..'F')+;

terminal OCTAL returns ecore::EBigDecimal:
  '0' ('0'..'7')+;

terminal FLOAT returns ecore::EBigDecimal:
  ('0'..'9')* '.' ('0'..'9')+;

