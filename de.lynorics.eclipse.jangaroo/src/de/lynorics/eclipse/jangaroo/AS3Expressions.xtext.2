/*
 * Copyright 2013
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://opensource.org/licenses/eclipse-1.0.txt
 */
grammar de.lynorics.eclipse.jangaroo.AS3Expressions with de.lynorics.eclipse.jangaroo.AS3Terminals

h h h g hg h f h
expression
  : assignmentExpression
  ;

// This is a list of expressions.
expressionList
  : assignmentExpression (COMMA assignmentExpression)*
  ;

// assignment expression (level 13)
assignmentExpression
  : conditionalExpression
  ( (assignmentOperator)=> o=assignmentOperator
    assignmentExpression
  )*
  ;


// conditional test (level 12)
conditionalExpression
  : (logicalOrExpression -> logicalOrExpression)
    (
      QUESTION
      conditionalSubExpression
    )?
  ;
conditionalSubExpression
  : assignmentExpression COLON! assignmentExpression
  ;

// TODO: should 'and'/'or' have same precidence as '&&'/'||' ?

// logical or (||)  (level 11)
logicalOrExpression
  : logicalAndExpression
    (o=logicalOrOperator logicalAndExpression )*
  ;



// logical and (&&)  (level 10)
logicalAndExpression
  : bitwiseOrExpression
    (o=logicalAndOperator bitwiseOrExpression )*
  ;



// bitwise or non-short-circuiting or (|)  (level 9)
bitwiseOrExpression
  : bitwiseXorExpression
    (o=BOR bitwiseXorExpression )*
  ;

// exclusive or (^)  (level 8)
bitwiseXorExpression
  : bitwiseAndExpression
    (o=BXOR bitwiseAndExpression )*
  ;

// bitwise or non-short-circuiting and (&)  (level 7)
bitwiseAndExpression
  : equalityExpression
    (o=BAND equalityExpression )*
  ;

// equality/inequality (==/!=) (level 6)
equalityExpression
  : relationalExpression
  ( o=equalityOperator
    relationalExpression
  )*
  ;

// boolean relational expressions (level 5)
relationalExpression
  : shiftExpression
    ((relationalOperator)=> o=relationalOperator shiftExpression )*
  ;



// bit shift expressions (level 4)
shiftExpression
  : additiveExpression
    (o=shiftOperator additiveExpression)*
  ;

// binary addition/subtraction (level 3)
additiveExpression
  : multiplicativeExpression
    (o=additiveOperator multiplicativeExpression)*
  ;

// multiplication/division/modulo (level 2)
multiplicativeExpression
  : unaryExpression
    ( o=multiplicativeOperator
      unaryExpression
    )*
  ;

multiplicativeOperator
  : s=STAR
  | DIV
  | MOD
  ;

//  (level 1)
unaryExpression
  : in=INC unaryExpression
  | de=DEC unaryExpression
  | MINUS unaryExpression
  | PLUS unaryExpression
  | unaryExpressionNotPlusMinus
  ;

unaryExpressionNotPlusMinus
  : DELETE postfixExpression
  | VOID unaryExpression
  | TYPEOF unaryExpression
  | LNOT unaryExpression
  | BNOT unaryExpression
  | postfixExpression
  ;

// qualified names, array expressions, method invocation, post inc/dec
postfixExpression
  : (primaryExpression
    ( poi=propOrIde
    | (LBRACK expression rb=RBRACK 
    | E4X_DESC qualifiedIdentifier
    | DOT LPAREN expression RPAREN
    | d=DOT e4xAttributeIdentifier
    | d=DOT STAR
    | (arguments
    )*

    (   in=INC
    | de=DEC
    )?
  ;


e4xAttributeIdentifier
  : E4X_ATTRI
    ( qualifiedIdent
    | STAR
    | LBRACK expression RBRACK
    )
  ;

primaryExpression
  : UNDEFINED
  | constant
  | arrayLiteral
  | objectLiteral
  | functionExpression
  | newExpression
  | encapsulatedExpression
  | e4xAttributeIdentifier
  | qualifiedIdent
  ;




constant
  : xmlLiteral
  | regexpLiteral
  | number
  | STRING_LITERAL
  | TRUE
  | FALSE
  | NULL
  ;





newExpression
  : NEW fullNewSubexpression ((LPAREN)=> arguments)?
  ;

fullNewSubexpression
  : ( primaryExpression
    )
    ( (DOT)=> d=DOT qualifiedIdent
    | (LBRACK)=> brackets
    )*
  ;

propertyOperator
  : DOT qualifiedIdent
  | brackets
  ;

brackets
  : LBRACK expressionList RBRACK
  ;

encapsulatedExpression
  : LPAREN assignmentExpression RPAREN
  ;

functionSignature
  : parameterDeclarationList typeExpression?
  ;

// TODO: block should be optional here,
functionCommon
  : functionSignature block
  ;

functionExpression
  : FUNCTION IDENT? functionCommon
  ;

