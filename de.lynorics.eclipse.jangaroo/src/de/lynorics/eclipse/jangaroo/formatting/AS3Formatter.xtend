/*
 * Copyright 2013
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://opensource.org/licenses/eclipse-1.0.txt
 */
/*
 * generated by Xtext
 */
package de.lynorics.eclipse.jangaroo.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess
import com.google.inject.Inject

// import com.google.inject.Inject;
// import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class AS3Formatter extends AbstractDeclarativeFormatter {

  @Inject AS3GrammarAccess g

  override protected void configureFormatting(FormattingConfig c) {
    c.setAutoLinewrap(120);

    //    // indentation between { }
    //    c.setIndentation(g.LEFT_CURLYAccess.leftCurlyBracketKeyword,
    //      g.RIGHT_CURLYAccess.rightCurlyBracketKeyword);
    //    // newline after ;
    //    c.setLinewrap.after(g.SEMICOLONRule);
    //    // newline after {
    //    c.setLinewrap.after(g.LEFT_CURLYRule);
    //    // newline before }
    //    c.setLinewrap.before(g.RIGHT_CURLYRule);
    //    // newline after }
    //    c.setLinewrap.after(g.RIGHT_CURLYRule);
    //    // remove spaces before ;
    //    c.setNoSpace.before(g.SEMICOLONRule);
    //     
    GenericFormatter.genericFormatting(c, g);

    //    val f = g; 
    //    val List<Pair<Keyword,Keyword>> pairs = f.findKeywordPairs("{", "}") as List<Pair<Keyword,Keyword>>;
    //      // find common keywords an specify formatting for them
    //      for (Pair<Keyword, Keyword> pair : pairs) {
    //
    //  c.setLinewrap. after(pair.key);
    //        c.setLinewrap.before(pair.value);
    //        c.setLinewrap.after(pair.value);
    //      }
    //      for (Keyword comma : f.findKeywords(",")) {
    //        c.setNoSpace().before(comma);
    //      }
    //  
    //      // formatting for grammar rule Line
    //      c.setLinewrap(2).after(f.getLineAccess().getSemicolonKeyword_1());
    //      c.setNoSpace().before(f.getLineAccess().getSemicolonKeyword_1());
    //      
    //      // formatting for grammar rule TestIndentation
    //      c.setIndentationIncrement().after(
    //          f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    //      c.setIndentationDecrement().before(
    //          f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    //      c.setLinewrap().after(
    //          f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    //      c.setLinewrap().after(
    //          f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    //      
    //      // formatting for grammar rule Param
    //      c.setNoLinewrap().around(f.getParamAccess().getColonKeyword_1());
    //      c.setNoSpace().around(f.getParamAccess().getColonKeyword_1());
    //      
    //      // formatting for Comments 
    c.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
  }
}
