/*
* generated by Xtext
*/
grammar InternalAS3;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess;

}

@parser::members {

 	private AS3GrammarAccess grammarAccess;
 	
    public InternalAS3Parser(TokenStream input, AS3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AS3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getPackageDeclarationParserRuleCall_0()); 
    }
    this_PackageDeclaration_0=rulePackageDeclaration
    { 
        $current = $this_PackageDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getActionScriptParserRuleCall_1()); 
    }
    this_ActionScript_1=ruleActionScript
    { 
        $current = $this_ActionScript_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElemntsActionScriptParserRuleCall_3_0()); 
	    }
		lv_elemnts_3_0=ruleActionScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"elemnts",
        		lv_elemnts_3_0, 
        		"ActionScript");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleActionScript
entryRuleActionScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionScriptRule()); }
	 iv_ruleActionScript=ruleActionScript 
	 { $current=$iv_ruleActionScript.current; } 
	 EOF 
;

// Rule ActionScript
ruleActionScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionScriptAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionScriptRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getActionScriptAccess().getElementsTypeParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionScriptRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportURIPackageDeclarationParserRuleCall_1_0()); 
	    }
		lv_importURI_1_0=rulePackageDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"PackageDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getVisibilityParserRuleCall_0_0()); 
    }
ruleVisibility
    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getClassParserRuleCall_0_1()); 
    }
    this_Class_1=ruleClass
    { 
        $current = $this_Class_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getFunctionParserRuleCall_1()); 
    }
    this_Function_2=ruleFunction
    { 
        $current = $this_Function_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getVariablesParserRuleCall_2()); 
    }
    this_Variables_3=ruleVariables
    { 
        $current = $this_Variables_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getVisibilityParserRuleCall_0_0()); 
    }
ruleVisibility
    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getVariablesParserRuleCall_0_1()); 
    }
    this_Variables_1=ruleVariables
    { 
        $current = $this_Variables_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getFunctionParserRuleCall_1()); 
    }
    this_Function_2=ruleFunction
    { 
        $current = $this_Function_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibility
entryRuleVisibility returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibilityRule()); } 
	 iv_ruleVisibility=ruleVisibility 
	 { $current=$iv_ruleVisibility.current.getText(); }  
	 EOF 
;

// Rule Visibility
ruleVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisibilityAccess().getPublicKeyword_0()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVisibilityAccess().getPrivateKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClassAccess().getSuperClassClassCrossReference_2_1_0()); 
	}

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getPropertiesPropertyParserRuleCall_4_0()); 
	    }
		lv_properties_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	 iv_ruleVariables=ruleVariables 
	 { $current=$iv_ruleVariables.current; } 
	 EOF 
;

// Rule Variables
ruleVariables returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariablesAccess().getVarKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariablesAccess().getUNITParserRuleCall_0_1()); 
    }
    this_UNIT_1=ruleUNIT
    { 
        $current = $this_UNIT_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='var' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariablesAccess().getVarKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariablesAccess().get_StringParserRuleCall_1_1()); 
    }
    this__String_3=rule_String
    { 
        $current = $this__String_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='var' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariablesAccess().getVarKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariablesAccess().get_intParserRuleCall_2_1()); 
    }
    this__int_5=rule_int
    { 
        $current = $this__int_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='var' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariablesAccess().getVarKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariablesAccess().getNumberParserRuleCall_3_1()); 
    }
    this_number_7=rulenumber
    { 
        $current = $this_number_7.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleUNIT
entryRuleUNIT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNITRule()); }
	 iv_ruleUNIT=ruleUNIT 
	 { $current=$iv_ruleUNIT.current; } 
	 EOF 
;

// Rule UNIT
ruleUNIT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_Name_0_0=RULE_ID
		{
			newLeafNode(lv_Name_0_0, grammarAccess.getUNITAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUNITRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Name",
        		lv_Name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUNITAccess().getColonKeyword_1());
    }
	otherlv_2='unit' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUNITAccess().getUnitKeyword_2());
    }
(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUNITAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_String_4_0=	'0x000000' 
    {
        newLeafNode(lv_String_4_0, grammarAccess.getUNITAccess().getString0x000000Keyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUNITRule());
	        }
       		setWithLastConsumed($current, "String", lv_String_4_0, "0x000000");
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUNITAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRule_String
entryRule_String returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.get_StringRule()); }
	 iv_rule_String=rule_String 
	 { $current=$iv_rule_String.current; } 
	 EOF 
;

// Rule _String
rule_String returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_Name_0_0=RULE_ID
		{
			newLeafNode(lv_Name_0_0, grammarAccess.get_StringAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.get_StringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Name",
        		lv_Name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.get_StringAccess().getColonKeyword_1());
    }
	otherlv_2='String' 
    {
    	newLeafNode(otherlv_2, grammarAccess.get_StringAccess().getStringKeyword_2());
    }
(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.get_StringAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_String_4_0=	'' 
    {
        newLeafNode(lv_String_4_0, grammarAccess.get_StringAccess().getStringKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.get_StringRule());
	        }
       		setWithLastConsumed($current, "String", lv_String_4_0, "");
	    }

)
)?)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.get_StringAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRule_int
entryRule_int returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.get_intRule()); }
	 iv_rule_int=rule_int 
	 { $current=$iv_rule_int.current; } 
	 EOF 
;

// Rule _int
rule_int returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_Name_0_0=RULE_ID
		{
			newLeafNode(lv_Name_0_0, grammarAccess.get_intAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.get_intRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Name",
        		lv_Name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.get_intAccess().getColonKeyword_1());
    }
	otherlv_2='int' 
    {
    	newLeafNode(otherlv_2, grammarAccess.get_intAccess().getIntKeyword_2());
    }
(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.get_intAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_int_4_0=	'0' 
    {
        newLeafNode(lv_int_4_0, grammarAccess.get_intAccess().getInt0Keyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.get_intRule());
	        }
       		setWithLastConsumed($current, "int", lv_int_4_0, "0");
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.get_intAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulenumber
entryRulenumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current; } 
	 EOF 
;

// Rule number
rulenumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_Name_0_0=RULE_ID
		{
			newLeafNode(lv_Name_0_0, grammarAccess.getNumberAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"Name",
        		lv_Name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumberAccess().getColonKeyword_1());
    }
	otherlv_2='Number' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberAccess().getNumberKeyword_2());
    }
(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumberAccess().getEqualsSignKeyword_3_0());
    }
(
(
		lv_double_4_0=	'0' 
    {
        newLeafNode(lv_double_4_0, grammarAccess.getNumberAccess().getDouble0Keyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		setWithLastConsumed($current, "double", lv_double_4_0, "0");
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumberAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


