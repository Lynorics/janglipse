/*
* generated by Xtext
*/
grammar InternalAS3;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AS3GrammarAccess grammarAccess;
 	
    public InternalAS3Parser(TokenStream input, AS3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AS3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((	'package' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_0_0()); 
	    }
		lv_package_0_0=rulePackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"Package");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImpImportsParserRuleCall_1_0_0()); 
	    }
		lv_imp_1_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"imp",
        		lv_imp_1_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMembersMethodParserRuleCall_1_1_0_0()); 
	    }
		lv_members_2_1=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_1, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMembersInterfaceMethodParserRuleCall_1_1_0_1()); 
	    }
		lv_members_2_2=ruleInterfaceMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_2, 
        		"InterfaceMethod");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMembersMemberVariableDeclarationParserRuleCall_1_1_0_2()); 
	    }
		lv_members_2_3=ruleMemberVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_3, 
        		"MemberVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesClassParserRuleCall_1_2_0_0()); 
	    }
		lv_classes_3_1=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_3_1, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesInterfaceParserRuleCall_1_2_0_1()); 
	    }
		lv_classes_3_2=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_3_2, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'package' 
)=>	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getImpImportsParserRuleCall_3_0()); 
	    }
		lv_imp_3_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"imp",
        		lv_imp_3_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getDirectivesDirectiveParserRuleCall_4_0()); 
	    }
		lv_directives_4_0=ruledirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_4_0, 
        		"directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getMembersMethodParserRuleCall_5_0_0()); 
	    }
		lv_members_5_1=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_1, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getMembersInterfaceMethodParserRuleCall_5_0_1()); 
	    }
		lv_members_5_2=ruleInterfaceMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_2, 
        		"InterfaceMethod");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getMembersMemberVariableDeclarationParserRuleCall_5_0_2()); 
	    }
		lv_members_5_3=ruleMemberVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_3, 
        		"MemberVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getClassesClassParserRuleCall_6_0_0()); 
	    }
		lv_classes_6_1=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_6_1, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getClassesInterfaceParserRuleCall_6_0_1()); 
	    }
		lv_classes_6_2=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_6_2, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPackageAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getImportsAccess().getImportsAction_0(),
            $current);
    }
)((	'import' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getImportsAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportsRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'import' 
)=>	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuledirective
entryRuledirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	 iv_ruledirective=ruledirective 
	 { $current=$iv_ruledirective.current; } 
	 EOF 
;

// Rule directive
ruledirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDirectiveAccess().getDirectiveAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getUsesUsesParserRuleCall_1_0_0()); 
	    }
		lv_uses_1_0=ruleUses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"uses",
        		lv_uses_1_0, 
        		"Uses");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDirectiveAccess().getSemicolonKeyword_1_1());
    }
))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getAnnonFieldsAnnotationFieldsParserRuleCall_2_1_0()); 
	    }
		lv_annonFields_3_0=ruleannotationFields		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"annonFields",
        		lv_annonFields_3_0, 
        		"annotationFields");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleUses
entryRuleUses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesRule()); }
	 iv_ruleUses=ruleUses 
	 { $current=$iv_ruleUses.current; } 
	 EOF 
;

// Rule Uses
ruleUses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUsesAccess().getUsesAction_0(),
            $current);
    }
)	otherlv_1='use' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUsesAccess().getUseKeyword_1());
    }
	otherlv_2='namespace' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUsesAccess().getNamespaceKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUsesAccess().getTypeQualifiedNameParserRuleCall_3_0_0()); 
	    }
		lv_type_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_anytype_4_0=	'*' 
    {
        newLeafNode(lv_anytype_4_0, grammarAccess.getUsesAccess().getAnytypeAsteriskKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUsesRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_4_0, "*");
	    }

)
)
    |(
(
		lv_anytype_5_0=	'void' 
    {
        newLeafNode(lv_anytype_5_0, grammarAccess.getUsesAccess().getAnytypeVoidKeyword_3_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUsesRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_5_0, "void");
	    }

)
)))
;





// Entry rule entryRuleannotationFields
entryRuleannotationFields returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationFieldsRule()); }
	 iv_ruleannotationFields=ruleannotationFields 
	 { $current=$iv_ruleannotationFields.current; } 
	 EOF 
;

// Rule annotationFields
ruleannotationFields returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldsAccess().getAnnonFieldsAnnotationFieldParserRuleCall_0_0()); 
	    }
		lv_annonFields_0_0=ruleannotationField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldsRule());
	        }
       		add(
       			$current, 
       			"annonFields",
        		lv_annonFields_0_0, 
        		"annotationField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationFieldsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldsAccess().getAnnonFieldsAnnotationFieldParserRuleCall_1_1_0()); 
	    }
		lv_annonFields_2_0=ruleannotationField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldsRule());
	        }
       		add(
       			$current, 
       			"annonFields",
        		lv_annonFields_2_0, 
        		"annotationField");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleannotationField
entryRuleannotationField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationFieldRule()); }
	 iv_ruleannotationField=ruleannotationField 
	 { $current=$iv_ruleannotationField.current; } 
	 EOF 
;

// Rule annotationField
ruleannotationField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getAnnotationFieldAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_STRING
		{
			newLeafNode(lv_name_0_2, grammarAccess.getAnnotationFieldAccess().getNameSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"STRING");
	    }

)

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationFieldAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAccessAccessLevelEnumRuleCall_1_0()); 
	    }
		lv_access_1_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_1_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((	'interface' 
)=>	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceAccess().getInterfaceKeyword_2_0());
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceAccess().getExtendsKeyword_2_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getSuperclassInterfaceCrossReference_2_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getMembersInterfaceMethodParserRuleCall_2_4_0()); 
	    }
		lv_members_7_0=ruleInterfaceMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_7_0, 
        		"InterfaceMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_2_5());
    }
))
;





// Entry rule entryRuleInterfaceMethod
entryRuleInterfaceMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMethodRule()); }
	 iv_ruleInterfaceMethod=ruleInterfaceMethod 
	 { $current=$iv_ruleInterfaceMethod.current; } 
	 EOF 
;

// Rule InterfaceMethod
ruleInterfaceMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getModifierModifierParserRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((	'function' 
)=>	otherlv_2='function' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceMethodAccess().getFunctionKeyword_2_0());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getAccessorAccessorRoleParserRuleCall_2_1_0_0()); 
	    }
		lv_accessor_3_0=ruleAccessorRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodRule());
	        }
       		set(
       			$current, 
       			"accessor",
        		lv_accessor_3_0, 
        		"AccessorRole");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getInterfaceMethodAccess().getNameIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceMethodAccess().getLeftParenthesisKeyword_2_1_2());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getParamsParameterParserRuleCall_2_2_0_0()); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceMethodAccess().getCommaKeyword_2_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getParamsParameterParserRuleCall_2_2_1_1_0()); 
	    }
		lv_params_8_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_8_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInterfaceMethodAccess().getRightParenthesisKeyword_2_3());
    }
(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInterfaceMethodAccess().getColonKeyword_2_4_0());
    }
((
(
		lv_anytype_11_0=	'void' 
    {
        newLeafNode(lv_anytype_11_0, grammarAccess.getInterfaceMethodAccess().getAnytypeVoidKeyword_2_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceMethodRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_11_0, "void");
	    }

)
)
    |(
(
		lv_anytype_12_0=	'*' 
    {
        newLeafNode(lv_anytype_12_0, grammarAccess.getInterfaceMethodAccess().getAnytypeAsteriskKeyword_2_4_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceMethodRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_12_0, "*");
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getTypeInterfaceCrossReference_2_4_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodAccess().getTypeClassCrossReference_2_4_1_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInterfaceMethodAccess().getSemicolonKeyword_2_5());
    }
)?))
;





// Entry rule entryRulefunctionExpression
entryRulefunctionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionExpressionRule()); }
	 iv_rulefunctionExpression=rulefunctionExpression 
	 { $current=$iv_rulefunctionExpression.current; } 
	 EOF 
;

// Rule functionExpression
rulefunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionExpressionAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionExpressionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFuncFunctionCommonParserRuleCall_2_0()); 
	    }
		lv_func_2_0=rulefunctionCommon		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_2_0, 
        		"functionCommon");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunctionCommon
entryRulefunctionCommon returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCommonRule()); }
	 iv_rulefunctionCommon=rulefunctionCommon 
	 { $current=$iv_rulefunctionCommon.current; } 
	 EOF 
;

// Rule functionCommon
rulefunctionCommon returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCommonAccess().getSigFunctionSignatureParserRuleCall_0_0()); 
	    }
		lv_sig_0_0=rulefunctionSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCommonRule());
	        }
       		set(
       			$current, 
       			"sig",
        		lv_sig_0_0, 
        		"functionSignature");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCommonAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCommonRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getModifierModifierParserRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((	'class' 
)=>	otherlv_2='class' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getClassKeyword_2_0());
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getExtendsKeyword_2_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperclassClassCrossReference_2_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='implements' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getImplementsKeyword_2_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getTypesInterfaceCrossReference_2_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassAccess().getCommaKeyword_2_3_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getTypesInterfaceCrossReference_2_3_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_2_5_0()); 
	    }
		lv_members_11_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_11_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_2_6());
    }
))
;





// Entry rule entryRuleAccessorRole
entryRuleAccessorRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessorRoleRule()); }
	 iv_ruleAccessorRole=ruleAccessorRole 
	 { $current=$iv_ruleAccessorRole.current; } 
	 EOF 
;

// Rule AccessorRole
ruleAccessorRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_accessor_0_0=RULE_ID
		{
			newLeafNode(lv_accessor_0_0, grammarAccess.getAccessorRoleAccess().getAccessorIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessorRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accessor",
        		lv_accessor_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getVarMemberVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleMemberVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"MemberVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getMethMethodParserRuleCall_1_0()); 
	    }
		lv_meth_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"meth",
        		lv_meth_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_1='override' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getOverrideKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getModifierModifierParserRuleCall_2_0()); 
	    }
		lv_modifier_2_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_2_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(((	'function' 
)=>	otherlv_3='function' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getFunctionKeyword_3_0());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getAccessorAccessorRoleParserRuleCall_3_1_0_0()); 
	    }
		lv_accessor_4_0=ruleAccessorRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"accessor",
        		lv_accessor_4_0, 
        		"AccessorRole");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3_1_2());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_2_0_0()); 
	    }
		lv_params_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getCommaKeyword_3_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_2_1_1_0()); 
	    }
		lv_params_9_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_9_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getRightParenthesisKeyword_3_3());
    }
(	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getColonKeyword_3_4_0());
    }
((
(
		lv_anytype_12_0=	'void' 
    {
        newLeafNode(lv_anytype_12_0, grammarAccess.getMethodAccess().getAnytypeVoidKeyword_3_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_12_0, "void");
	    }

)
)
    |(
(
		lv_anytype_13_0=	'*' 
    {
        newLeafNode(lv_anytype_13_0, grammarAccess.getMethodAccess().getAnytypeAsteriskKeyword_3_4_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_13_0, "*");
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeInterfaceCrossReference_3_4_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeClassCrossReference_3_4_1_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyBlockParserRuleCall_3_5_0_0()); 
	    }
		lv_body_16_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_16_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMethodAccess().getSemicolonKeyword_3_5_1());
    }
)))
;





// Entry rule entryRuleModifier
entryRuleModifier returns [EObject current=null] 
	@init { 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getModifierAccess().getUnorderedGroup_1()
		);
	}
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current; } 
	 EOF 
;
finally {
	myUnorderedGroupState.restore();
}

// Rule Modifier
ruleModifier returns [EObject current=null] 
    @init { enterRule(); 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getModifierAccess().getUnorderedGroup_1()
		);
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModifierAccess().getModifierAction_0(),
            $current);
    }
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 0);
	 				}
					({true}?=>(
(
		lv_static_2_0=	'static' 
    {
        newLeafNode(lv_static_2_0, grammarAccess.getModifierAccess().getStaticStaticKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModifierRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 1);
	 				}
					({true}?=>(
(
		lv_final_3_0=	'final' 
    {
        newLeafNode(lv_final_3_0, grammarAccess.getModifierAccess().getFinalFinalKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModifierRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 2);
	 				}
					({true}?=>(
(
		lv_native_4_0=	'native' 
    {
        newLeafNode(lv_native_4_0, grammarAccess.getModifierAccess().getNativeNativeKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModifierRule());
	        }
       		setWithLastConsumed($current, "native", true, "native");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 3);
	 				}
					({true}?=>(
(
		lv_dynamic_5_0=	'dynamic' 
    {
        newLeafNode(lv_dynamic_5_0, grammarAccess.getModifierAccess().getDynamicDynamicKeyword_1_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModifierRule());
	        }
       		setWithLastConsumed($current, "dynamic", true, "dynamic");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup_1(), 4);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModifierAccess().getAccessAccessLevelEnumRuleCall_1_4_0()); 
	    }
		lv_access_6_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModifierRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_6_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModifierAccess().getUnorderedGroup_1());
	}

))
;
finally {
	myUnorderedGroupState.restore();
}







// Entry rule entryRuleMemberVariableDeclaration
entryRuleMemberVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberVariableDeclarationRule()); }
	 iv_ruleMemberVariableDeclaration=ruleMemberVariableDeclaration 
	 { $current=$iv_ruleMemberVariableDeclaration.current; } 
	 EOF 
;

// Rule MemberVariableDeclaration
ruleMemberVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberVariableDeclarationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberVariableDeclarationAccess().getModifierModifierParserRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='var' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberVariableDeclarationAccess().getVarKeyword_2_0());
    }

    |	otherlv_3='const' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMemberVariableDeclarationAccess().getConstKeyword_2_1());
    }
)(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getMemberVariableDeclarationAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMemberVariableDeclarationAccess().getColonKeyword_4_0());
    }
((
(
		lv_anytype_6_0=	'void' 
    {
        newLeafNode(lv_anytype_6_0, grammarAccess.getMemberVariableDeclarationAccess().getAnytypeVoidKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_6_0, "void");
	    }

)
)
    |(
(
		lv_anytype_7_0=	'*' 
    {
        newLeafNode(lv_anytype_7_0, grammarAccess.getMemberVariableDeclarationAccess().getAnytypeAsteriskKeyword_4_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_7_0, "*");
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMemberVariableDeclarationAccess().getTypeInterfaceCrossReference_4_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMemberVariableDeclarationAccess().getTypeClassCrossReference_4_1_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMemberVariableDeclarationAccess().getEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberVariableDeclarationAccess().getExpressionAssignmentExpressionParserRuleCall_5_1_0()); 
	    }
		lv_Expression_11_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"Expression",
        		lv_Expression_11_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMemberVariableDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0_0());
    }

    |	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getConstKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0());
    }
((
(
		lv_anytype_4_0=	'void' 
    {
        newLeafNode(lv_anytype_4_0, grammarAccess.getVariableDeclarationAccess().getAnytypeVoidKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_4_0, "void");
	    }

)
)
    |(
(
		lv_anytype_5_0=	'*' 
    {
        newLeafNode(lv_anytype_5_0, grammarAccess.getVariableDeclarationAccess().getAnytypeAsteriskKeyword_2_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_5_0, "*");
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeInterfaceCrossReference_2_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeClassCrossReference_2_1_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0()); 
	    }
		lv_Expression_9_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"Expression",
        		lv_Expression_9_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getConstKeyword_0());
    }
)?(	otherlv_1='...' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getFullStopFullStopFullStopKeyword_1());
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getColonKeyword_3_0());
    }
((
(
		lv_anytype_4_0=	'void' 
    {
        newLeafNode(lv_anytype_4_0, grammarAccess.getParameterAccess().getAnytypeVoidKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_4_0, "void");
	    }

)
)
    |(
(
		lv_anytype_5_0=	'*' 
    {
        newLeafNode(lv_anytype_5_0, grammarAccess.getParameterAccess().getAnytypeAsteriskKeyword_3_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "anytype", lv_anytype_5_0, "*");
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeInterfaceCrossReference_3_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeClassCrossReference_3_1_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getParameterAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getLitExprOrObjectLiteralParserRuleCall_4_1_0()); 
	    }
		lv_lit_9_0=ruleexprOrObjectLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_9_0, 
        		"exprOrObjectLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleobjectLiteral
entryRuleobjectLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectLiteralRule()); }
	 iv_ruleobjectLiteral=ruleobjectLiteral 
	 { $current=$iv_ruleobjectLiteral.current; } 
	 EOF 
;

// Rule objectLiteral
ruleobjectLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectLiteralAccess().getFieldsFieldListParserRuleCall_2_0()); 
	    }
		lv_fields_2_0=rulefieldList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"fieldList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulefieldList
entryRulefieldList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldListRule()); }
	 iv_rulefieldList=rulefieldList 
	 { $current=$iv_rulefieldList.current; } 
	 EOF 
;

// Rule fieldList
rulefieldList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldListAccess().getLfLiteralFieldParserRuleCall_0_0()); 
	    }
		lv_lf_0_0=ruleliteralField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldListRule());
	        }
       		set(
       			$current, 
       			"lf",
        		lv_lf_0_0, 
        		"literalField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldListAccess().getFieldsLiteralFieldParserRuleCall_1_1_0()); 
	    }
		lv_fields_2_0=ruleliteralField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldListRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"literalField");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleliteralField
entryRuleliteralField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralFieldRule()); }
	 iv_ruleliteralField=ruleliteralField 
	 { $current=$iv_ruleliteralField.current; } 
	 EOF 
;

// Rule literalField
ruleliteralField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralFieldAccess().getNameFieldNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=rulefieldName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"fieldName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralFieldAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralFieldAccess().getElElementParserRuleCall_2_0()); 
	    }
		lv_el_2_0=ruleelement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralFieldRule());
	        }
       		set(
       			$current, 
       			"el",
        		lv_el_2_0, 
        		"element");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefieldName
entryRulefieldName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); }
	 iv_rulefieldName=rulefieldName 
	 { $current=$iv_rulefieldName.current; } 
	 EOF 
;

// Rule fieldName
rulefieldName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldNameAccess().getIdentiIdentiParserRuleCall_0_0()); 
	    }
		lv_identi_0_0=ruleidenti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldNameRule());
	        }
       		set(
       			$current, 
       			"identi",
        		lv_identi_0_0, 
        		"identi");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldNameAccess().getNumberNumberParserRuleCall_1_0()); 
	    }
		lv_number_1_0=rulenumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldNameRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_1_0, 
        		"number");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFieldNameAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleelement=ruleelement 
	 { $current=$iv_ruleelement.current; } 
	 EOF 
;

// Rule element
ruleelement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementAccess().getAssignmentExpressionParserRuleCall()); 
    }
    this_assignmentExpression_0=ruleassignmentExpression
    { 
        $current = $this_assignmentExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleexprOrObjectLiteral
entryRuleexprOrObjectLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrObjectLiteralRule()); }
	 iv_ruleexprOrObjectLiteral=ruleexprOrObjectLiteral 
	 { $current=$iv_ruleexprOrObjectLiteral.current; } 
	 EOF 
;

// Rule exprOrObjectLiteral
ruleexprOrObjectLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrObjectLiteralAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrObjectLiteralAccess().getObjectLiteralParserRuleCall_1()); 
    }
    this_objectLiteral_1=ruleobjectLiteral
    { 
        $current = $this_objectLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulequalifiedIdent
entryRulequalifiedIdent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	 iv_rulequalifiedIdent=rulequalifiedIdent 
	 { $current=$iv_rulequalifiedIdent.current; } 
	 EOF 
;

// Rule qualifiedIdent
rulequalifiedIdent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQualifiedIdentAccess().getNamespaceNameParserRuleCall_0_0()); 
    }
    this_namespaceName_0=rulenamespaceName
    { 
        $current = $this_namespaceName_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedIdentAccess().getColonColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedIdentAccess().getIdeIdentiParserRuleCall_1_0()); 
	    }
		lv_ide_2_0=ruleidenti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedIdentRule());
	        }
       		set(
       			$current, 
       			"ide",
        		lv_ide_2_0, 
        		"identi");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleidenti
entryRuleidenti returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentiRule()); }
	 iv_ruleidenti=ruleidenti 
	 { $current=$iv_ruleidenti.current; } 
	 EOF 
;

// Rule identi
ruleidenti returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentiAccess().getIdentiAction_0_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIdentiAccess().getQualifiedNameParserRuleCall_0_1()); 
    }
ruleQualifiedName
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
(
		lv_i_2_0=	'xml' 
    {
        newLeafNode(lv_i_2_0, grammarAccess.getIdentiAccess().getIXmlKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentiRule());
	        }
       		setWithLastConsumed($current, "i", lv_i_2_0, "xml");
	    }

)
)
    |(
(
		lv_i_3_0=	'is' 
    {
        newLeafNode(lv_i_3_0, grammarAccess.getIdentiAccess().getIIsKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentiRule());
	        }
       		setWithLastConsumed($current, "i", lv_i_3_0, "is");
	    }

)
)
    |(
(
		lv_i_4_0=	'as' 
    {
        newLeafNode(lv_i_4_0, grammarAccess.getIdentiAccess().getIAsKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentiRule());
	        }
       		setWithLastConsumed($current, "i", lv_i_4_0, "as");
	    }

)
))
;







// Entry rule entryRulepropertyIdentifier
entryRulepropertyIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyIdentifierRule()); }
	 iv_rulepropertyIdentifier=rulepropertyIdentifier 
	 { $current=$iv_rulepropertyIdentifier.current; } 
	 EOF 
;

// Rule propertyIdentifier
rulepropertyIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPropertyIdentifierAccess().getPropertyIdentifierAction_0_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyIdentifierAccess().getAsteriskKeyword_0_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyIdentifierAccess().getIdentiParserRuleCall_1()); 
    }
    this_identi_2=ruleidenti
    { 
        $current = $this_identi_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulequalifier
entryRulequalifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifierRule()); }
	 iv_rulequalifier=rulequalifier 
	 { $current=$iv_rulequalifier.current; } 
	 EOF 
;

// Rule qualifier
rulequalifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQualifierAccess().getPropertyIdentifierParserRuleCall_0()); 
    }
    this_propertyIdentifier_0=rulepropertyIdentifier
    { 
        $current = $this_propertyIdentifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifierAccess().getLevelAccessLevelEnumRuleCall_1_0()); 
	    }
		lv_level_1_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifierRule());
	        }
       		set(
       			$current, 
       			"level",
        		lv_level_1_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesimpleQualifiedIdentifier
entryRulesimpleQualifiedIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleQualifiedIdentifierRule()); }
	 iv_rulesimpleQualifiedIdentifier=rulesimpleQualifiedIdentifier 
	 { $current=$iv_rulesimpleQualifiedIdentifier.current; } 
	 EOF 
;

// Rule simpleQualifiedIdentifier
rulesimpleQualifiedIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleQualifiedIdentifierAccess().getProIdPropertyIdentifierParserRuleCall_0_0()); 
	    }
		lv_proId_0_0=rulepropertyIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"proId",
        		lv_proId_0_0, 
        		"propertyIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleQualifiedIdentifierAccess().getQualQualifierParserRuleCall_1_0_0()); 
	    }
		lv_qual_1_0=rulequalifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"qual",
        		lv_qual_1_0, 
        		"qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='::' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleQualifiedIdentifierAccess().getColonColonKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleQualifiedIdentifierAccess().getPidenPropertyIdentifierParserRuleCall_1_2_0_0()); 
	    }
		lv_piden_3_0=rulepropertyIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"piden",
        		lv_piden_3_0, 
        		"propertyIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleQualifiedIdentifierAccess().getBraBracketsParserRuleCall_1_2_1_0()); 
	    }
		lv_bra_4_0=rulebrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"bra",
        		lv_bra_4_0, 
        		"brackets");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleexpressionQualifiedIdentifier
entryRuleexpressionQualifiedIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionQualifiedIdentifierRule()); }
	 iv_ruleexpressionQualifiedIdentifier=ruleexpressionQualifiedIdentifier 
	 { $current=$iv_ruleexpressionQualifiedIdentifier.current; } 
	 EOF 
;

// Rule expressionQualifiedIdentifier
ruleexpressionQualifiedIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionQualifiedIdentifierAccess().getEncapsulatedExpressionParserRuleCall_0()); 
    }
    this_encapsulatedExpression_0=ruleencapsulatedExpression
    { 
        $current = $this_encapsulatedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionQualifiedIdentifierAccess().getColonColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionQualifiedIdentifierAccess().getPdenPropertyIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_pden_2_0=rulepropertyIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"pden",
        		lv_pden_2_0, 
        		"propertyIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionQualifiedIdentifierAccess().getBraBracketsParserRuleCall_2_1_0()); 
	    }
		lv_bra_3_0=rulebrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionQualifiedIdentifierRule());
	        }
       		set(
       			$current, 
       			"bra",
        		lv_bra_3_0, 
        		"brackets");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulenonAttributeQualifiedIdentifier
entryRulenonAttributeQualifiedIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonAttributeQualifiedIdentifierRule()); }
	 iv_rulenonAttributeQualifiedIdentifier=rulenonAttributeQualifiedIdentifier 
	 { $current=$iv_rulenonAttributeQualifiedIdentifier.current; } 
	 EOF 
;

// Rule nonAttributeQualifiedIdentifier
rulenonAttributeQualifiedIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonAttributeQualifiedIdentifierAccess().getSimpleQualifiedIdentifierParserRuleCall_0()); 
    }
    this_simpleQualifiedIdentifier_0=rulesimpleQualifiedIdentifier
    { 
        $current = $this_simpleQualifiedIdentifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonAttributeQualifiedIdentifierAccess().getExpressionQualifiedIdentifierParserRuleCall_1()); 
    }
    this_expressionQualifiedIdentifier_1=ruleexpressionQualifiedIdentifier
    { 
        $current = $this_expressionQualifiedIdentifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulequalifiedIdentifier
entryRulequalifiedIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); }
	 iv_rulequalifiedIdentifier=rulequalifiedIdentifier 
	 { $current=$iv_rulequalifiedIdentifier.current; } 
	 EOF 
;

// Rule qualifiedIdentifier
rulequalifiedIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQualifiedIdentifierAccess().getE4xAttributeIdentifierParserRuleCall_0()); 
    }
    this_e4xAttributeIdentifier_0=rulee4xAttributeIdentifier
    { 
        $current = $this_e4xAttributeIdentifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQualifiedIdentifierAccess().getNonAttributeQualifiedIdentifierParserRuleCall_1()); 
    }
    this_nonAttributeQualifiedIdentifier_1=rulenonAttributeQualifiedIdentifier
    { 
        $current = $this_nonAttributeQualifiedIdentifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenamespaceName
entryRulenamespaceName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceNameRule()); }
	 iv_rulenamespaceName=rulenamespaceName 
	 { $current=$iv_rulenamespaceName.current; } 
	 EOF 
;

// Rule namespaceName
rulenamespaceName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNamespaceNameAccess().getNamespaceNameAction_0_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamespaceNameAccess().getQualifiedNameParserRuleCall_0_1()); 
    }
ruleQualifiedName
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceNameAccess().getLevelAccessLevelEnumRuleCall_1_0()); 
	    }
		lv_level_2_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceNameRule());
	        }
       		set(
       			$current, 
       			"level",
        		lv_level_2_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulearrayLiteral
entryRulearrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_rulearrayLiteral=rulearrayLiteral 
	 { $current=$iv_rulearrayLiteral.current; } 
	 EOF 
;

// Rule arrayLiteral
rulearrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getListElementListParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleelementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"elementList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleelementList
entryRuleelementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	 iv_ruleelementList=ruleelementList 
	 { $current=$iv_ruleelementList.current; } 
	 EOF 
;

// Rule elementList
ruleelementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementListAccess().getElementListAction_0_0(),
            $current);
    }
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementListAccess().getCommaKeyword_0_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementListAccess().getNonemptyElementListParserRuleCall_1()); 
    }
    this_nonemptyElementList_2=rulenonemptyElementList
    { 
        $current = $this_nonemptyElementList_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenonemptyElementList
entryRulenonemptyElementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonemptyElementListRule()); }
	 iv_rulenonemptyElementList=rulenonemptyElementList 
	 { $current=$iv_rulenonemptyElementList.current; } 
	 EOF 
;

// Rule nonemptyElementList
rulenonemptyElementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNonemptyElementListAccess().getAssignmentExpressionParserRuleCall_0()); 
    }
    this_assignmentExpression_0=ruleassignmentExpression
    { 
        $current = $this_assignmentExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonemptyElementListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonemptyElementListAccess().getExprAssignmentExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonemptyElementListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); 
    }
    this_assignmentExpression_0=ruleassignmentExpression
    { 
        $current = $this_assignmentExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleexpressionList=ruleexpressionList 
	 { $current=$iv_ruleexpressionList.current; } 
	 EOF 
;

// Rule expressionList
ruleexpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprAssignmentExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprAssignmentExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleassignmentExpression
entryRuleassignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleassignmentExpression=ruleassignmentExpression 
	 { $current=$iv_ruleassignmentExpression.current; } 
	 EOF 
;

// Rule assignmentExpression
ruleassignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_conditionalExpression_0=ruleconditionalExpression
    { 
        $current = $this_conditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleassignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"assignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAexprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_aexpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		add(
       			$current, 
       			"aexpr",
        		lv_aexpr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleassignmentOperator
entryRuleassignmentOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); } 
	 iv_ruleassignmentOperator=ruleassignmentOperator 
	 { $current=$iv_ruleassignmentOperator.current.getText(); }  
	 EOF 
;

// Rule assignmentOperator
ruleassignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_7()); 
    }

    |
	kw='>>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_9()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_10()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_11()); 
    }

    |
	kw='&&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandAmpersandEqualsSignKeyword_12()); 
    }

    |
	kw='||=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineVerticalLineEqualsSignKeyword_13()); 
    }
)
    ;





// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleconditionalExpression=ruleconditionalExpression 
	 { $current=$iv_ruleconditionalExpression.current; } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_logicalOrExpression_0=rulelogicalOrExpression
    { 
        $current = $this_logicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCondConditionalSubExpressionParserRuleCall_1_1_0()); 
	    }
		lv_cond_2_0=ruleconditionalSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_2_0, 
        		"conditionalSubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleconditionalSubExpression
entryRuleconditionalSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalSubExpressionRule()); }
	 iv_ruleconditionalSubExpression=ruleconditionalSubExpression 
	 { $current=$iv_ruleconditionalSubExpression.current; } 
	 EOF 
;

// Rule conditionalSubExpression
ruleconditionalSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSubExpressionAccess().getExpr1AssignmentExpressionParserRuleCall_0_0()); 
	    }
		lv_expr1_0_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSubExpressionRule());
	        }
       		set(
       			$current, 
       			"expr1",
        		lv_expr1_0_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalSubExpressionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSubExpressionAccess().getExpr2AssignmentExpressionParserRuleCall_2_0()); 
	    }
		lv_expr2_2_0=ruleassignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSubExpressionRule());
	        }
       		set(
       			$current, 
       			"expr2",
        		lv_expr2_2_0, 
        		"assignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelogicalOrExpression
entryRulelogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_rulelogicalOrExpression=rulelogicalOrExpression 
	 { $current=$iv_rulelogicalOrExpression.current; } 
	 EOF 
;

// Rule logicalOrExpression
rulelogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulelogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"logicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOLogicalOrOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=rulelogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"logicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulelogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"logicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogicalOrOperator
entryRulelogicalOrOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrOperatorRule()); } 
	 iv_rulelogicalOrOperator=rulelogicalOrOperator 
	 { $current=$iv_rulelogicalOrOperator.current.getText(); }  
	 EOF 
;

// Rule logicalOrOperator
rulelogicalOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOrOperatorAccess().getVerticalLineVerticalLineKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOrOperatorAccess().getOrKeyword_1()); 
    }
)
    ;





// Entry rule entryRulelogicalAndExpression
entryRulelogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_rulelogicalAndExpression=rulelogicalAndExpression 
	 { $current=$iv_rulelogicalAndExpression.current; } 
	 EOF 
;

// Rule logicalAndExpression
rulelogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getExprBitwiseOrExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulebitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"bitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOLogicalAndOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=rulelogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"logicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getExprBitwiseOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulebitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"bitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogicalAndOperator
entryRulelogicalAndOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndOperatorRule()); } 
	 iv_rulelogicalAndOperator=rulelogicalAndOperator 
	 { $current=$iv_rulelogicalAndOperator.current.getText(); }  
	 EOF 
;

// Rule logicalAndOperator
rulelogicalAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalAndOperatorAccess().getAmpersandAmpersandKeyword_0()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalAndOperatorAccess().getAndKeyword_1()); 
    }
)
    ;





// Entry rule entryRulebitwiseOrExpression
entryRulebitwiseOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	 iv_rulebitwiseOrExpression=rulebitwiseOrExpression 
	 { $current=$iv_rulebitwiseOrExpression.current; } 
	 EOF 
;

// Rule bitwiseOrExpression
rulebitwiseOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getExprBitwiseXorExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulebitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"bitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_o_1_0=	'|' 
    {
        newLeafNode(lv_o_1_0, grammarAccess.getBitwiseOrExpressionAccess().getOVerticalLineKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		addWithLastConsumed($current, "o", lv_o_1_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getExprBitwiseXorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulebitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"bitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebitwiseXorExpression
entryRulebitwiseXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseXorExpressionRule()); }
	 iv_rulebitwiseXorExpression=rulebitwiseXorExpression 
	 { $current=$iv_rulebitwiseXorExpression.current; } 
	 EOF 
;

// Rule bitwiseXorExpression
rulebitwiseXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getExprBitwiseAndExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulebitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"bitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_o_1_0=	'^' 
    {
        newLeafNode(lv_o_1_0, grammarAccess.getBitwiseXorExpressionAccess().getOCircumflexAccentKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		addWithLastConsumed($current, "o", lv_o_1_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getExprBitwiseAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulebitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"bitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebitwiseAndExpression
entryRulebitwiseAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	 iv_rulebitwiseAndExpression=rulebitwiseAndExpression 
	 { $current=$iv_rulebitwiseAndExpression.current; } 
	 EOF 
;

// Rule bitwiseAndExpression
rulebitwiseAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getExprEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"equalityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_o_1_0=	'&' 
    {
        newLeafNode(lv_o_1_0, grammarAccess.getBitwiseAndExpressionAccess().getOAmpersandKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		addWithLastConsumed($current, "o", lv_o_1_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getExprEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleequalityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"equalityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleequalityExpression
entryRuleequalityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleequalityExpression=ruleequalityExpression 
	 { $current=$iv_ruleequalityExpression.current; } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"relationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOEqualityOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=ruleequalityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"equalityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"relationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleequalityOperator
entryRuleequalityOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); } 
	 iv_ruleequalityOperator=ruleequalityOperator 
	 { $current=$iv_ruleequalityOperator.current.getText(); }  
	 EOF 
;

// Rule equalityOperator
ruleequalityOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignEqualsSignKeyword_1()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleshiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"shiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getORelationalOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=rulerelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"relationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleshiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"shiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerelationalOperator
entryRulerelationalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); } 
	 iv_rulerelationalOperator=rulerelationalOperator 
	 { $current=$iv_rulerelationalOperator.current.getText(); }  
	 EOF 
;

// Rule relationalOperator
rulerelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getIsKeyword_5()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getAsKeyword_6()); 
    }

    |
	kw='instanceof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleshiftExpression
entryRuleshiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleshiftExpression=ruleshiftExpression 
	 { $current=$iv_ruleshiftExpression.current; } 
	 EOF 
;

// Rule shiftExpression
ruleshiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"additiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOShiftOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=ruleshiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"shiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"additiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleshiftOperator
entryRuleshiftOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftOperatorRule()); } 
	 iv_ruleshiftOperator=ruleshiftOperator 
	 { $current=$iv_ruleshiftOperator.current.getText(); }  
	 EOF 
;

// Rule shiftOperator
ruleshiftOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_0()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1()); 
    }

    |
	kw='>>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"multiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOAdditiveOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=ruleadditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"additiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"multiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleadditiveOperator
entryRuleadditiveOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); } 
	 iv_ruleadditiveOperator=ruleadditiveOperator 
	 { $current=$iv_ruleadditiveOperator.current.getText(); }  
	 EOF 
;

// Rule additiveOperator
ruleadditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExprUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOMultiplicativeOperatorParserRuleCall_1_0_0()); 
	    }
		lv_o_1_0=rulemultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"o",
        		lv_o_1_0, 
        		"multiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExprUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemultiplicativeOperator
entryRulemultiplicativeOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); } 
	 iv_rulemultiplicativeOperator=rulemultiplicativeOperator 
	 { $current=$iv_rulemultiplicativeOperator.current.getText(); }  
	 EOF 
;

// Rule multiplicativeOperator
rulemultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getPercentSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_in_0_0=	'++' 
    {
        newLeafNode(lv_in_0_0, grammarAccess.getUnaryExpressionAccess().getInPlusSignPlusSignKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "in", lv_in_0_0, "++");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_1_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_de_2_0=	'--' 
    {
        newLeafNode(lv_de_2_0, grammarAccess.getUnaryExpressionAccess().getDeHyphenMinusHyphenMinusKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "de", lv_de_2_0, "--");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_3_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUaemUnaryExpressionParserRuleCall_2_1_0()); 
	    }
		lv_uaem_5_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"uaem",
        		lv_uaem_5_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='+' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUaepUnaryExpressionParserRuleCall_3_1_0()); 
	    }
		lv_uaep_7_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"uaep",
        		lv_uaep_7_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUaenpmUnaryExpressionNotPlusMinusParserRuleCall_4_0()); 
	    }
		lv_uaenpm_8_0=ruleunaryExpressionNotPlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"uaenpm",
        		lv_uaenpm_8_0, 
        		"unaryExpressionNotPlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleunaryExpressionNotPlusMinus
entryRuleunaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 iv_ruleunaryExpressionNotPlusMinus=ruleunaryExpressionNotPlusMinus 
	 { $current=$iv_ruleunaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule unaryExpressionNotPlusMinus
ruleunaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='delete' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getDeleteKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPostfixExpressionParserRuleCall_0_1()); 
    }
    this_postfixExpression_1=rulepostfixExpression
    { 
        $current = $this_postfixExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='void' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getVoidKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_unaryExpression_3=ruleunaryExpression
    { 
        $current = $this_unaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='typeof' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTypeofKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_2_1()); 
    }
    this_unaryExpression_5=ruleunaryExpression
    { 
        $current = $this_unaryExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='!' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_3_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_3_1()); 
    }
    this_unaryExpression_7=ruleunaryExpression
    { 
        $current = $this_unaryExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_8='~' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_4_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_4_1()); 
    }
    this_unaryExpression_9=ruleunaryExpression
    { 
        $current = $this_unaryExpression_9.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPostfixExpressionParserRuleCall_5()); 
    }
    this_postfixExpression_10=rulepostfixExpression
    { 
        $current = $this_postfixExpression_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulepostfixExpression
entryRulepostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulepostfixExpression=rulepostfixExpression 
	 { $current=$iv_rulepostfixExpression.current; } 
	 EOF 
;

// Rule postfixExpression
rulepostfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPeexprPrimaryExpressionParserRuleCall_1_0_0()); 
	    }
		lv_peexpr_1_0=ruleprimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"peexpr",
        		lv_peexpr_1_0, 
        		"primaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPepoiPropOrIdentParserRuleCall_1_1_0_0()); 
	    }
		lv_pepoi_2_0=rulepropOrIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"pepoi",
        		lv_pepoi_2_0, 
        		"propOrIdent");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPostfixExpressionAccess().getLeftSquareBracketKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getExprExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPostfixExpressionAccess().getRightSquareBracketKeyword_1_1_1_2());
    }
)
    |(	otherlv_6='..' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPostfixExpressionAccess().getFullStopFullStopKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPewiQualifiedIdentifierParserRuleCall_1_1_2_1_0()); 
	    }
		lv_pewi_7_0=rulequalifiedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"pewi",
        		lv_pewi_7_0, 
        		"qualifiedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPostfixExpressionAccess().getFullStopKeyword_1_1_3_0());
    }
	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getExprExpressionParserRuleCall_1_1_3_2_0()); 
	    }
		lv_expr_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_1_3_3());
    }
)
    |(	otherlv_12='.' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPostfixExpressionAccess().getFullStopKeyword_1_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getE4xE4xAttributeIdentifierParserRuleCall_1_1_4_1_0()); 
	    }
		lv_e4x_13_0=rulee4xAttributeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"e4x",
        		lv_e4x_13_0, 
        		"e4xAttributeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_14='.' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPostfixExpressionAccess().getFullStopKeyword_1_1_5_0());
    }
	otherlv_15='*' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPostfixExpressionAccess().getAsteriskKeyword_1_1_5_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgsArgumentsParserRuleCall_1_1_6_0()); 
	    }
		lv_args_16_0=rulearguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_16_0, 
        		"arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		lv_in_17_0=	'++' 
    {
        newLeafNode(lv_in_17_0, grammarAccess.getPostfixExpressionAccess().getInPlusSignPlusSignKeyword_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixExpressionRule());
	        }
       		setWithLastConsumed($current, "in", lv_in_17_0, "++");
	    }

)
)
    |(
(
		lv_de_18_0=	'--' 
    {
        newLeafNode(lv_de_18_0, grammarAccess.getPostfixExpressionAccess().getDeHyphenMinusHyphenMinusKeyword_1_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixExpressionRule());
	        }
       		setWithLastConsumed($current, "de", lv_de_18_0, "--");
	    }

)
))?))
;





// Entry rule entryRulearguments
entryRulearguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_rulearguments=rulearguments 
	 { $current=$iv_rulearguments.current; } 
	 EOF 
;

// Rule arguments
rulearguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExprListExpressionListParserRuleCall_1_0_1_0()); 
	    }
		lv_exprList_2_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"exprList",
        		lv_exprList_2_0, 
        		"expressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1_1_0());
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_1_1_1());
    }
)))
;





// Entry rule entryRulee4xAttributeIdentifier
entryRulee4xAttributeIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getE4xAttributeIdentifierRule()); }
	 iv_rulee4xAttributeIdentifier=rulee4xAttributeIdentifier 
	 { $current=$iv_rulee4xAttributeIdentifier.current; } 
	 EOF 
;

// Rule e4xAttributeIdentifier
rulee4xAttributeIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getE4xAttributeIdentifierAccess().getE4xAttributeIdentifierAction_0(),
            $current);
    }
)	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getE4xAttributeIdentifierAccess().getCommercialAtKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getE4xAttributeIdentifierAccess().getQualQualifiedIdentParserRuleCall_2_0_0()); 
	    }
		lv_qual_2_0=rulequalifiedIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getE4xAttributeIdentifierRule());
	        }
       		set(
       			$current, 
       			"qual",
        		lv_qual_2_0, 
        		"qualifiedIdent");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getE4xAttributeIdentifierAccess().getAsteriskKeyword_2_1());
    }

    |(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getE4xAttributeIdentifierAccess().getLeftSquareBracketKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getE4xAttributeIdentifierAccess().getExprExpressionParserRuleCall_2_2_1_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getE4xAttributeIdentifierRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getE4xAttributeIdentifierAccess().getRightSquareBracketKeyword_2_2_2());
    }
)))
;





// Entry rule entryRuleprimaryExpression
entryRuleprimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_ruleprimaryExpression=ruleprimaryExpression 
	 { $current=$iv_ruleprimaryExpression.current; } 
	 EOF 
;

// Rule primaryExpression
ruleprimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0(),
            $current);
    }
)(	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getAsteriskKeyword_1_0());
    }

    |(	otherlv_2='super' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getSuperKeyword_1_1_0());
    }
(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperExprExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_superExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"superExpr",
        		lv_superExpr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_1_1_2());
    }
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConTerminalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_con_6_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"con",
        		lv_con_6_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLitArrayLiteralParserRuleCall_1_3_0()); 
	    }
		lv_lit_7_0=rulearrayLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_7_0, 
        		"arrayLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLitObjectLiteralParserRuleCall_1_4_0()); 
	    }
		lv_lit_8_0=ruleobjectLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_8_0, 
        		"objectLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFexprFunctionExpressionParserRuleCall_1_5_0()); 
	    }
		lv_fexpr_9_0=rulefunctionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"fexpr",
        		lv_fexpr_9_0, 
        		"functionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((	'new' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNexprNewExpressionParserRuleCall_1_6_0()); 
	    }
		lv_nexpr_10_0=rulenewExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"nexpr",
        		lv_nexpr_10_0, 
        		"newExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getEncexprEncapsulatedExpressionParserRuleCall_1_7_0()); 
	    }
		lv_encexpr_11_0=ruleencapsulatedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"encexpr",
        		lv_encexpr_11_0, 
        		"encapsulatedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getE4xE4xAttributeIdentifierParserRuleCall_1_8_0()); 
	    }
		lv_e4x_12_0=rulee4xAttributeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"e4x",
        		lv_e4x_12_0, 
        		"e4xAttributeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getQualQualifiedIdentParserRuleCall_1_9_0()); 
	    }
		lv_qual_13_0=rulequalifiedIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"qual",
        		lv_qual_13_0, 
        		"qualifiedIdent");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulepropOrIdent
entryRulepropOrIdent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropOrIdentRule()); }
	 iv_rulepropOrIdent=rulepropOrIdent 
	 { $current=$iv_rulepropOrIdent.current; } 
	 EOF 
;

// Rule propOrIdent
rulepropOrIdent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropOrIdentAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropOrIdentAccess().getPropIdQualifiedIdentParserRuleCall_1_0()); 
	    }
		lv_propId_1_0=rulequalifiedIdent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropOrIdentRule());
	        }
       		set(
       			$current, 
       			"propId",
        		lv_propId_1_0, 
        		"qualifiedIdent");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getXmlConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getValueXmlLiteralParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=rulexmlLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"xmlLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getRegexpConstantAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getValueRegexpLiteralParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleregexpLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"regexpLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getNumberConstantAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getValueNumberParserRuleCall_2_1_0()); 
	    }
		lv_value_5_0=rulenumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"number");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringConstantAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBoolConstantAction_4_0(),
            $current);
    }
)(
(
(
		lv_value_9_1=	'true' 
    {
        newLeafNode(lv_value_9_1, grammarAccess.getTerminalExpressionAccess().getValueTrueKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_9_1, null);
	    }

    |		lv_value_9_2=	'false' 
    {
        newLeafNode(lv_value_9_2, grammarAccess.getTerminalExpressionAccess().getValueFalseKeyword_4_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_9_2, null);
	    }

)

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getUndefinedAction_5_0(),
            $current);
    }
)	otherlv_11='undefined' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTerminalExpressionAccess().getUndefinedKeyword_5_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getThisAction_6_0(),
            $current);
    }
)	otherlv_13='this' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTerminalExpressionAccess().getThisKeyword_6_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getNullAction_7_0(),
            $current);
    }
)	otherlv_15='null' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTerminalExpressionAccess().getNullKeyword_7_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getSymbolRefAction_8_0(),
            $current);
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_17=RULE_ID
	{
		newLeafNode(otherlv_17, grammarAccess.getTerminalExpressionAccess().getSymbolMemberVariableDeclarationCrossReference_8_1_0_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getTerminalExpressionAccess().getSymbolVariableDeclarationCrossReference_8_1_1_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_19=RULE_ID
	{
		newLeafNode(otherlv_19, grammarAccess.getTerminalExpressionAccess().getSymbolParameterCrossReference_8_1_2_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getTerminalExpressionAccess().getSymbolClassCrossReference_8_1_3_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_21=RULE_ID
	{
		newLeafNode(otherlv_21, grammarAccess.getTerminalExpressionAccess().getSymbolInterfaceCrossReference_8_1_4_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getTerminalExpressionAccess().getSymbolMethodCrossReference_8_1_5_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_23=RULE_ID
	{
		newLeafNode(otherlv_23, grammarAccess.getTerminalExpressionAccess().getSymbolInterfaceMethodCrossReference_8_1_6_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getTerminalExpressionAccess().getSymbolBasicParameterDeclarationCrossReference_8_1_7_0()); 
	}

)
))))
;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getNumberAccess().getHEX_LITERALTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_OCTAL_2=RULE_OCTAL    {
		$current.merge(this_OCTAL_2);
    }

    { 
    newLeafNode(this_OCTAL_2, grammarAccess.getNumberAccess().getOCTALTerminalRuleCall_2()); 
    }

    |    this_FLOAT_3=RULE_FLOAT    {
		$current.merge(this_FLOAT_3);
    }

    { 
    newLeafNode(this_FLOAT_3, grammarAccess.getNumberAccess().getFLOATTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRulexmlLiteral
entryRulexmlLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getXmlLiteralRule()); } 
	 iv_rulexmlLiteral=rulexmlLiteral 
	 { $current=$iv_rulexmlLiteral.current.getText(); }  
	 EOF 
;

// Rule xmlLiteral
rulexmlLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXmlLiteralAccess().getLessThanSignKeyword()); 
    }

    ;





// Entry rule entryRuleregexpLiteral
entryRuleregexpLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegexpLiteralRule()); }
	 iv_ruleregexpLiteral=ruleregexpLiteral 
	 { $current=$iv_ruleregexpLiteral.current; } 
	 EOF 
;

// Rule regexpLiteral
ruleregexpLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_s_0_0=	'/' 
    {
        newLeafNode(lv_s_0_0, grammarAccess.getRegexpLiteralAccess().getSSolidusKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegexpLiteralRule());
	        }
       		setWithLastConsumed($current, "s", lv_s_0_0, "/");
	    }

)
)
;





// Entry rule entryRulenewExpression
entryRulenewExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewExpressionRule()); }
	 iv_rulenewExpression=rulenewExpression 
	 { $current=$iv_rulenewExpression.current; } 
	 EOF 
;

// Rule newExpression
rulenewExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'new' 
)=>	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewExpressionAccess().getNewKeyword_0());
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNewExpressionAccess().getTypeInterfaceCrossReference_1_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNewExpressionAccess().getTypeClassCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getNewExpressionAccess().getArgsArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_3_0=rulearguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;







// Entry rule entryRulebrackets
entryRulebrackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketsRule()); }
	 iv_rulebrackets=rulebrackets 
	 { $current=$iv_rulebrackets.current; } 
	 EOF 
;

// Rule brackets
rulebrackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBracketsAccess().getLeftSquareBracketKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBracketsAccess().getExpressionListParserRuleCall_1()); 
    }
    this_expressionList_1=ruleexpressionList
    { 
        $current = $this_expressionList_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracketsAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleencapsulatedExpression
entryRuleencapsulatedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEncapsulatedExpressionRule()); }
	 iv_ruleencapsulatedExpression=ruleencapsulatedExpression 
	 { $current=$iv_ruleencapsulatedExpression.current; } 
	 EOF 
;

// Rule encapsulatedExpression
ruleencapsulatedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEncapsulatedExpressionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEncapsulatedExpressionAccess().getAssignmentExpressionParserRuleCall_1()); 
    }
    this_assignmentExpression_1=ruleassignmentExpression
    { 
        $current = $this_assignmentExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEncapsulatedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRulefunctionSignature
entryRulefunctionSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionSignatureRule()); }
	 iv_rulefunctionSignature=rulefunctionSignature 
	 { $current=$iv_rulefunctionSignature.current; } 
	 EOF 
;

// Rule functionSignature
rulefunctionSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionSignatureAccess().getParamParameterDeclarationListParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleparameterDeclarationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionSignatureRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"parameterDeclarationList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionSignatureAccess().getTypeTypeExpressionParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruletypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionSignatureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"typeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuletypeExpression
entryRuletypeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	 iv_ruletypeExpression=ruletypeExpression 
	 { $current=$iv_ruletypeExpression.current; } 
	 EOF 
;

// Rule typeExpression
ruletypeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeExpressionAccess().getTypeExpressionAction_0(),
            $current);
    }
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeExpressionAccess().getColonKeyword_1());
    }
(	otherlv_2='void' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeExpressionAccess().getVoidKeyword_2_0());
    }

    |	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeExpressionAccess().getAsteriskKeyword_2_1());
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeExpressionAccess().getIdentiInterfaceCrossReference_2_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeExpressionAccess().getIdentiClassCrossReference_2_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleparameterDeclarationList
entryRuleparameterDeclarationList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationListRule()); }
	 iv_ruleparameterDeclarationList=ruleparameterDeclarationList 
	 { $current=$iv_ruleparameterDeclarationList.current; } 
	 EOF 
;

// Rule parameterDeclarationList
ruleparameterDeclarationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationListAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterDeclarationListAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDeclarationListRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParamsParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDeclarationListRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParameterDeclarationListAccess().getRightParenthesisKeyword_3());
    }
)
;







// Entry rule entryRulebasicParameterDeclaration
entryRulebasicParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicParameterDeclarationRule()); }
	 iv_rulebasicParameterDeclaration=rulebasicParameterDeclaration 
	 { $current=$iv_rulebasicParameterDeclaration.current; } 
	 EOF 
;

// Rule basicParameterDeclaration
rulebasicParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBasicParameterDeclarationAccess().getConstKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicParameterDeclarationAccess().getNameIdentiParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidenti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identi");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicParameterDeclarationAccess().getTypeTypeExpressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"typeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicParameterDeclarationAccess().getParamParameterDefaultParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleparameterDefault		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"parameterDefault");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleparameterDefault
entryRuleparameterDefault returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDefaultRule()); }
	 iv_ruleparameterDefault=ruleparameterDefault 
	 { $current=$iv_ruleparameterDefault.current; } 
	 EOF 
;

// Rule parameterDefault
ruleparameterDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterDefaultAccess().getEqualsSignKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterDefaultAccess().getAssignmentExpressionParserRuleCall_1()); 
    }
    this_assignmentExpression_1=ruleassignmentExpression
    { 
        $current = $this_assignmentExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleparameterRestDeclaration
entryRuleparameterRestDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRestDeclarationRule()); }
	 iv_ruleparameterRestDeclaration=ruleparameterRestDeclaration 
	 { $current=$iv_ruleparameterRestDeclaration.current; } 
	 EOF 
;

// Rule parameterRestDeclaration
ruleparameterRestDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterRestDeclarationAccess().getParameterRestDeclarationAction_0(),
            $current);
    }
)	otherlv_1='...' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterRestDeclarationAccess().getFullStopFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterRestDeclarationAccess().getNameIdentiParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleidenti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRestDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"identi");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_1()); 
    }
    this_VariableDeclaration_1=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_2()); 
    }
    this_ExpressionStatement_2=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); 
    }
    this_IfStatement_3=ruleIfStatement
    { 
        $current = $this_IfStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForEachStatementParserRuleCall_4()); 
    }
    this_ForEachStatement_4=ruleForEachStatement
    { 
        $current = $this_ForEachStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_5()); 
    }
    this_ForStatement_5=ruleForStatement
    { 
        $current = $this_ForStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_6()); 
    }
    this_WhileStatement_6=ruleWhileStatement
    { 
        $current = $this_WhileStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_7()); 
    }
    this_DoWhileStatement_7=ruleDoWhileStatement
    { 
        $current = $this_DoWhileStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWithStatementParserRuleCall_8()); 
    }
    this_WithStatement_8=ruleWithStatement
    { 
        $current = $this_WithStatement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_9()); 
    }
    this_SwitchStatement_9=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_10()); 
    }
ruleBreakStatement
    { 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_11()); 
    }
ruleContinueStatement
    { 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_12()); 
    }
    this_ReturnStatement_12=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_13()); 
    }
    this_ThrowStatement_13=ruleThrowStatement
    { 
        $current = $this_ThrowStatement_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTryStatementParserRuleCall_14()); 
    }
    this_TryStatement_14=ruleTryStatement
    { 
        $current = $this_TryStatement_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDefaultXMLNamespaceStatementParserRuleCall_15()); 
    }
    this_DefaultXMLNamespaceStatement_15=ruleDefaultXMLNamespaceStatement
    { 
        $current = $this_DefaultXMLNamespaceStatement_15.current; 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStatementAccess().getSemicolonKeyword_16());
    }

    |(	otherlv_17='assert' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatementAccess().getAssertKeyword_17_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getAssertConditionParserRuleCall_17_1_0()); 
	    }
		lv_assert_18_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"assert",
        		lv_assert_18_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDefaultXMLNamespaceStatement
entryRuleDefaultXMLNamespaceStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultXMLNamespaceStatementRule()); }
	 iv_ruleDefaultXMLNamespaceStatement=ruleDefaultXMLNamespaceStatement 
	 { $current=$iv_ruleDefaultXMLNamespaceStatement.current; } 
	 EOF 
;

// Rule DefaultXMLNamespaceStatement
ruleDefaultXMLNamespaceStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultXMLNamespaceStatementAccess().getDefaultKeyword_0());
    }
	otherlv_1='xml' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultXMLNamespaceStatementAccess().getXmlKeyword_1());
    }
	otherlv_2='namespace' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefaultXMLNamespaceStatementAccess().getNamespaceKeyword_2());
    }
	otherlv_3='assign' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefaultXMLNamespaceStatementAccess().getAssignKeyword_3());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefaultXMLNamespaceStatementAccess().getExpressionParserRuleCall_4()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefaultXMLNamespaceStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionListParserRuleCall()); 
    }
    this_expressionList_0=ruleexpressionList
    { 
        $current = $this_expressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_3='else' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getElseKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementParserRuleCall_3_1_0()); 
	    }
		lv_else_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrowStatementRule()); }
	 iv_ruleThrowStatement=ruleThrowStatement 
	 { $current=$iv_ruleThrowStatement.current; } 
	 EOF 
;

// Rule ThrowStatement
ruleThrowStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='throw' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTryStatement
entryRuleTryStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryStatementRule()); }
	 iv_ruleTryStatement=ruleTryStatement 
	 { $current=$iv_ruleTryStatement.current; } 
	 EOF 
;

// Rule TryStatement
ruleTryStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_0()); 
	    }
		lv_finally_2_0=rulefinallyBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"finally",
        		lv_finally_2_0, 
        		"finallyBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_1_0_0()); 
	    }
		lv_catch_3_0=rulecatchBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"catch",
        		lv_catch_3_0, 
        		"catchBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_1_0()); 
	    }
		lv_finally_4_0=rulefinallyBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"finally",
        		lv_finally_4_0, 
        		"finallyBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRulecatchBlock
entryRulecatchBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCatchBlockRule()); }
	 iv_rulecatchBlock=rulecatchBlock 
	 { $current=$iv_rulecatchBlock.current; } 
	 EOF 
;

// Rule catchBlock
rulecatchBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCatchBlockAccess().getCatchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCatchBlockAccess().getIdentiParserRuleCall_2()); 
    }
    this_identi_2=ruleidenti
    { 
        $current = $this_identi_2.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchBlockAccess().getTypeTypeExpressionParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruletypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchBlockRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"typeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0()); 
	    }
		lv_block_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchBlockRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_5_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefinallyBlock
entryRulefinallyBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinallyBlockRule()); }
	 iv_rulefinallyBlock=rulefinallyBlock 
	 { $current=$iv_rulefinallyBlock.current; } 
	 EOF 
;

// Rule finallyBlock
rulefinallyBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='finally' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockParserRuleCall_1()); 
    }
    this_Block_1=ruleBlock
    { 
        $current = $this_Block_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); } 
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current.getText(); }  
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContinueStatementAccess().getContinueKeyword()); 
    }

    ;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); } 
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current.getText(); }  
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBreakStatementAccess().getBreakKeyword()); 
    }

    ;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSwitchStatementAccess().getConditionParserRuleCall_1()); 
    }
    this_Condition_1=ruleCondition
    { 
        $current = $this_Condition_1.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchSwitchBlockParserRuleCall_2_0()); 
	    }
		lv_switch_2_0=ruleswitchBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_2_0, 
        		"switchBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleswitchBlock
entryRuleswitchBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchBlockRule()); }
	 iv_ruleswitchBlock=ruleswitchBlock 
	 { $current=$iv_ruleswitchBlock.current; } 
	 EOF 
;

// Rule switchBlock
ruleswitchBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitchBlockAccess().getSwitchBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchBlockAccess().getCaseCaseStatementParserRuleCall_2_0()); 
	    }
		lv_case_2_0=ruleCaseStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchBlockRule());
	        }
       		add(
       			$current, 
       			"case",
        		lv_case_2_0, 
        		"CaseStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchBlockAccess().getDefDefaultStatementParserRuleCall_3_0()); 
	    }
		lv_def_3_0=ruleDefaultStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchBlockRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_3_0, 
        		"DefaultStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	 iv_ruleCaseStatement=ruleCaseStatement 
	 { $current=$iv_ruleCaseStatement.current; } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCaseKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCaseStatementAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getLSwitchStatementListParserRuleCall_3_0()); 
	    }
		lv_l_3_0=ruleswitchStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_3_0, 
        		"switchStatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefaultStatement
entryRuleDefaultStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultStatementRule()); }
	 iv_ruleDefaultStatement=ruleDefaultStatement 
	 { $current=$iv_ruleDefaultStatement.current; } 
	 EOF 
;

// Rule DefaultStatement
ruleDefaultStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultStatementAccess().getDefaultKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultStatementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultStatementAccess().getLSwitchStatementListParserRuleCall_2_0()); 
	    }
		lv_l_2_0=ruleswitchStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultStatementRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_2_0, 
        		"switchStatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleswitchStatementList
entryRuleswitchStatementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementListRule()); }
	 iv_ruleswitchStatementList=ruleswitchStatementList 
	 { $current=$iv_ruleswitchStatementList.current; } 
	 EOF 
;

// Rule switchStatementList
ruleswitchStatementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitchStatementListAccess().getSwitchStatementListAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementListAccess().getStatementsStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementListRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleForEachStatement
entryRuleForEachStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForEachStatementRule()); }
	 iv_ruleForEachStatement=ruleForEachStatement 
	 { $current=$iv_ruleForEachStatement.current; } 
	 EOF 
;

// Rule ForEachStatement
ruleForEachStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForEachStatementAccess().getForKeyword_0());
    }
	otherlv_1='each' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForEachStatementAccess().getEachKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForEachStatementAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachStatementAccess().getFesforForInClauseParserRuleCall_3_0()); 
	    }
		lv_fesfor_3_0=ruleforInClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachStatementRule());
	        }
       		set(
       			$current, 
       			"fesfor",
        		lv_fesfor_3_0, 
        		"forInClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForEachStatementAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForEachStatementAccess().getFesStatementParserRuleCall_5_0()); 
	    }
		lv_fes_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForEachStatementRule());
	        }
       		set(
       			$current, 
       			"fes",
        		lv_fes_5_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForInForInClauseParserRuleCall_2_0_0_0()); 
	    }
		lv_forIn_2_0=ruleforInClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forIn",
        		lv_forIn_2_0, 
        		"forInClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_2_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getFsstateStatementParserRuleCall_2_0_2_0()); 
	    }
		lv_fsstate_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"fsstate",
        		lv_fsstate_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getTraditionalForClauseTraditionalForClauseParserRuleCall_2_1_0_0()); 
	    }
		lv_traditionalForClause_5_0=ruletraditionalForClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"traditionalForClause",
        		lv_traditionalForClause_5_0, 
        		"traditionalForClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getFsstateStatementParserRuleCall_2_1_2_0()); 
	    }
		lv_fsstate_7_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"fsstate",
        		lv_fsstate_7_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuletraditionalForClause
entryRuletraditionalForClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraditionalForClauseRule()); }
	 iv_ruletraditionalForClause=ruletraditionalForClause 
	 { $current=$iv_ruletraditionalForClause.current; } 
	 EOF 
;

// Rule traditionalForClause
ruletraditionalForClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTraditionalForClauseAccess().getAForInitParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleforInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraditionalForClauseRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"forInit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTraditionalForClauseAccess().getSemicolonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraditionalForClauseAccess().getBForCondParserRuleCall_2_0()); 
	    }
		lv_b_2_0=ruleforCond		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraditionalForClauseRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"forCond");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTraditionalForClauseAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraditionalForClauseAccess().getCForIterParserRuleCall_4_0()); 
	    }
		lv_c_4_0=ruleforIter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraditionalForClauseRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_4_0, 
        		"forIter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleforInClause
entryRuleforInClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInClauseRule()); }
	 iv_ruleforInClause=ruleforInClause 
	 { $current=$iv_ruleforInClause.current; } 
	 EOF 
;

// Rule forInClause
ruleforInClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForInClauseAccess().getFicdeclForInClauseDeclParserRuleCall_0_0()); 
	    }
		lv_ficdecl_0_0=ruleforInClauseDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInClauseRule());
	        }
       		set(
       			$current, 
       			"ficdecl",
        		lv_ficdecl_0_0, 
        		"forInClauseDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForInClauseAccess().getInKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForInClauseAccess().getFictailForInClauseTailParserRuleCall_2_0()); 
	    }
		lv_fictail_2_0=ruleforInClauseTail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInClauseRule());
	        }
       		set(
       			$current, 
       			"fictail",
        		lv_fictail_2_0, 
        		"forInClauseTail");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleforInClauseDecl
entryRuleforInClauseDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInClauseDeclRule()); }
	 iv_ruleforInClauseDecl=ruleforInClauseDecl 
	 { $current=$iv_ruleforInClauseDecl.current; } 
	 EOF 
;

// Rule forInClauseDecl
ruleforInClauseDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForInClauseDeclAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForInClauseDeclAccess().getIdentiParserRuleCall_1()); 
    }
    this_identi_1=ruleidenti
    { 
        $current = $this_identi_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleforInClauseTail
entryRuleforInClauseTail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInClauseTailRule()); }
	 iv_ruleforInClauseTail=ruleforInClauseTail 
	 { $current=$iv_ruleforInClauseTail.current; } 
	 EOF 
;

// Rule forInClauseTail
ruleforInClauseTail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForInClauseTailAccess().getExpressionListParserRuleCall()); 
    }
    this_expressionList_0=ruleexpressionList
    { 
        $current = $this_expressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleforInit
entryRuleforInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitRule()); }
	 iv_ruleforInit=ruleforInit 
	 { $current=$iv_ruleforInit.current; } 
	 EOF 
;

// Rule forInit
ruleforInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForInitAccess().getForInitAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getDeclVariableDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_decl_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		set(
       			$current, 
       			"decl",
        		lv_decl_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForInitAccess().getExprExpressionListParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInitRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expressionList");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleforCond
entryRuleforCond returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForCondRule()); }
	 iv_ruleforCond=ruleforCond 
	 { $current=$iv_ruleforCond.current; } 
	 EOF 
;

// Rule forCond
ruleforCond returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForCondAccess().getForCondAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForCondAccess().getExprExpressionListParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForCondRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"expressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleforIter
entryRuleforIter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForIterRule()); }
	 iv_ruleforIter=ruleforIter 
	 { $current=$iv_ruleforIter.current; } 
	 EOF 
;

// Rule forIter
ruleforIter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForIterAccess().getForIterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForIterAccess().getFiexprExpressionListParserRuleCall_1_0()); 
	    }
		lv_fiexpr_1_0=ruleexpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForIterRule());
	        }
       		set(
       			$current, 
       			"fiexpr",
        		lv_fiexpr_1_0, 
        		"expressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileStatementRule()); }
	 iv_ruleDoWhileStatement=ruleDoWhileStatement 
	 { $current=$iv_ruleDoWhileStatement.current; } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getStateStatementParserRuleCall_1_0()); 
	    }
		lv_state_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getCondConditionParserRuleCall_3_0()); 
	    }
		lv_cond_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleWithStatement
entryRuleWithStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWithStatementRule()); }
	 iv_ruleWithStatement=ruleWithStatement 
	 { $current=$iv_ruleWithStatement.current; } 
	 EOF 
;

// Rule WithStatement
ruleWithStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWithStatementAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWithStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWithStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule AccessLevel
ruleAccessLevel returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='internal' 
	{
        $current = grammarAccess.getAccessLevelAccess().getINTERNALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAccessLevelAccess().getINTERNALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='private' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='public' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='protected' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_3()); 
    }
));



RULE_HEX_LITERAL : '0x' ('0'..'9'|'A'..'F')+;

RULE_OCTAL : '0' ('0'..'7')+;

RULE_FLOAT : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\'|'/')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\'|'/')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


