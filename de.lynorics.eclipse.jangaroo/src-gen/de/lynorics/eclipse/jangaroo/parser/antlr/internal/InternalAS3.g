/*
* generated by Xtext
*/
grammar InternalAS3;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.lynorics.eclipse.jangaroo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AS3GrammarAccess grammarAccess;
 	
    public InternalAS3Parser(TokenStream input, AS3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AS3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_0_0()); 
	    }
		lv_package_0_0=rulePackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"Package");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImpImportsParserRuleCall_1_0_0()); 
	    }
		lv_imp_1_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"imp",
        		lv_imp_1_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesClassParserRuleCall_1_1_0_0()); 
	    }
		lv_classes_2_1=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_2_1, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesInterfaceParserRuleCall_1_1_0_1()); 
	    }
		lv_classes_2_2=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_2_2, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getImpImportsParserRuleCall_3_0()); 
	    }
		lv_imp_3_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"imp",
        		lv_imp_3_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getDirectivesDirectiveParserRuleCall_4_0()); 
	    }
		lv_directives_4_0=ruledirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_4_0, 
        		"directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getClassesClassParserRuleCall_5_0_0()); 
	    }
		lv_classes_5_1=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_5_1, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getClassesInterfaceParserRuleCall_5_0_1()); 
	    }
		lv_classes_5_2=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_5_2, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPackageAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getImportsAccess().getImportsAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImportsAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportsRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuledirective
entryRuledirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	 iv_ruledirective=ruledirective 
	 { $current=$iv_ruledirective.current; } 
	 EOF 
;

// Rule directive
ruledirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDirectiveAccess().getDirectiveAction_0_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDirectiveAccess().getLeftSquareBracketKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDirectiveAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDirectiveAccess().getLeftParenthesisKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getAnnonFieldsAnnotationFieldsParserRuleCall_0_3_1_0()); 
	    }
		lv_annonFields_4_0=ruleannotationFields		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"annonFields",
        		lv_annonFields_4_0, 
        		"annotationFields");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDirectiveAccess().getRightParenthesisKeyword_0_3_2());
    }
)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDirectiveAccess().getRightSquareBracketKeyword_0_4());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getUsesParserRuleCall_1()); 
    }
    this_Uses_7=ruleUses
    { 
        $current = $this_Uses_7.current; 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDirectiveAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleUses
entryRuleUses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesRule()); }
	 iv_ruleUses=ruleUses 
	 { $current=$iv_ruleUses.current; } 
	 EOF 
;

// Rule Uses
ruleUses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUsesAccess().getUseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUsesAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUsesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getUsesAccess().getTypeQualifiedNameParserRuleCall_2_0_0()); 
	    }
		lv_type_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUsesRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUsesAccess().getAsteriskKeyword_2_1());
    }

    |	otherlv_4='void' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUsesAccess().getVoidKeyword_2_2());
    }
))
;





// Entry rule entryRuleannotationFields
entryRuleannotationFields returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationFieldsRule()); }
	 iv_ruleannotationFields=ruleannotationFields 
	 { $current=$iv_ruleannotationFields.current; } 
	 EOF 
;

// Rule annotationFields
ruleannotationFields returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldsAccess().getAnoonFieldsAnnotationFieldParserRuleCall_0_0()); 
	    }
		lv_anoonFields_0_0=ruleannotationField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldsRule());
	        }
       		add(
       			$current, 
       			"anoonFields",
        		lv_anoonFields_0_0, 
        		"annotationField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationFieldsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldsAccess().getAnnonFieldsAnnotationFieldParserRuleCall_1_1_0()); 
	    }
		lv_annonFields_2_0=ruleannotationField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldsRule());
	        }
       		add(
       			$current, 
       			"annonFields",
        		lv_annonFields_2_0, 
        		"annotationField");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleannotationField
entryRuleannotationField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationFieldRule()); }
	 iv_ruleannotationField=ruleannotationField 
	 { $current=$iv_ruleannotationField.current; } 
	 EOF 
;

// Rule annotationField
ruleannotationField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAnnotationFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationFieldAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationFieldAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationFieldRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAccessAccessLevelEnumRuleCall_0_0()); 
	    }
		lv_access_0_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_0_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getSuperclassInterfaceCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getMembersMemberParserRuleCall_5_0()); 
	    }
		lv_members_6_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_6_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getAccessAccessLevelEnumRuleCall_0_0()); 
	    }
		lv_access_0_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_0_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='final' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassAccess().getFinalKeyword_1());
    }
)?(	otherlv_2='static' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getStaticKeyword_2());
    }
)?(	otherlv_3='dynamic' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassAccess().getDynamicKeyword_3());
    }
)?	otherlv_4='class' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getClassKeyword_4());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)(	otherlv_6='extends' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getExtendsKeyword_6_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperTypeClassCrossReference_6_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='implements' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassAccess().getImplementsKeyword_7_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getTypesInterfaceCrossReference_7_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getClassAccess().getCommaKeyword_7_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getTypesInterfaceCrossReference_7_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_9_0()); 
	    }
		lv_members_13_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_13_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getVarVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getMethMethodParserRuleCall_1_0()); 
	    }
		lv_meth_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"meth",
        		lv_meth_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='override' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodAccess().getOverrideKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getAccessAccessLevelEnumRuleCall_1_0()); 
	    }
		lv_access_1_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_1_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='native' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getNativeKeyword_2());
    }
)?(	otherlv_3='static' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getStaticKeyword_3());
    }
)?	otherlv_4='function' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getFunctionKeyword_4());
    }
(	otherlv_5='get' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getGetKeyword_5_0());
    }

    |	otherlv_6='set' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getSetKeyword_5_1());
    }
)?(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_7());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_8_0_0()); 
	    }
		lv_params_9_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_9_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getCommaKeyword_8_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_8_1_1_0()); 
	    }
		lv_params_11_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_11_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMethodAccess().getRightParenthesisKeyword_9());
    }
(	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMethodAccess().getColonKeyword_10_0());
    }
(	otherlv_14='void' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMethodAccess().getVoidKeyword_10_1_0());
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeClassCrossReference_10_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyMethodBodyParserRuleCall_11_0()); 
	    }
		lv_body_16_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_16_0, 
        		"MethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	 iv_ruleMethodBody=ruleMethodBody 
	 { $current=$iv_ruleMethodBody.current; } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodBodyAccess().getMethodBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodBodyAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodBodyRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnParserRuleCall_1()); 
    }
    this_Return_1=ruleReturn
    { 
        $current = $this_Return_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_2_0()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_2_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); 
    }
    this_IfStatement_4=ruleIfStatement
    { 
        $current = $this_IfStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_4()); 
    }
    this_SwitchStatement_5=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTryStatementParserRuleCall_5()); 
    }
    this_TryStatement_6=ruleTryStatement
    { 
        $current = $this_TryStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_6()); 
    }
    this_WhileStatement_7=ruleWhileStatement
    { 
        $current = $this_WhileStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_7()); 
    }
    this_DoWhileStatement_8=ruleDoWhileStatement
    { 
        $current = $this_DoWhileStatement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_8()); 
    }
    this_ForStatement_9=ruleForStatement
    { 
        $current = $this_ForStatement_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getNewStatementParserRuleCall_9()); 
    }
    this_NewStatement_10=ruleNewStatement
    { 
        $current = $this_NewStatement_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getObjectLiteralParserRuleCall_10()); 
    }
    this_objectLiteral_11=ruleobjectLiteral
    { 
        $current = $this_objectLiteral_11.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNewStatement
entryRuleNewStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewStatementRule()); }
	 iv_ruleNewStatement=ruleNewStatement 
	 { $current=$iv_ruleNewStatement.current; } 
	 EOF 
;

// Rule NewStatement
ruleNewStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNewStatementAccess().getNewAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNewStatementAccess().getNewKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewStatementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNewStatementAccess().getTypeClassCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNewStatementAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewStatementAccess().getParamParametersParserRuleCall_3_1_0()); 
	    }
		lv_param_4_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewStatementRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNewStatementAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForinitCommaExprParserRuleCall_0_2_0()); 
	    }
		lv_forinit_2_0=rulecommaExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forinit",
        		lv_forinit_2_0, 
        		"commaExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getConditionCommaExprParserRuleCall_0_4_0()); 
	    }
		lv_condition_4_0=rulecommaExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"commaExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getIteratorCommaExprParserRuleCall_0_6_0()); 
	    }
		lv_iterator_6_0=rulecommaExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"iterator",
        		lv_iterator_6_0, 
        		"commaExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_0_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getCommandStatementsBlockParserRuleCall_0_8_0()); 
	    }
		lv_command_8_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_8_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_9='for' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getForStatementAccess().getForKeyword_1_0());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1_1());
    }
	otherlv_11='var' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getForStatementAccess().getVarKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getElementsIdentifierDeclarationParserRuleCall_1_3_0()); 
	    }
		lv_elements_12_0=ruleidentifierDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_12_0, 
        		"identifierDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getElementsIdentifierDeclarationParserRuleCall_1_4_1_0()); 
	    }
		lv_elements_14_0=ruleidentifierDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_14_0, 
        		"identifierDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getForStatementAccess().getSemicolonKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getConditionCommaExprParserRuleCall_1_6_0()); 
	    }
		lv_condition_16_0=rulecommaExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_16_0, 
        		"commaExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getSemicolonKeyword_1_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getIteratorCommaExprParserRuleCall_1_8_0()); 
	    }
		lv_iterator_18_0=rulecommaExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"iterator",
        		lv_iterator_18_0, 
        		"commaExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_1_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getCommandStatementsBlockParserRuleCall_1_10_0()); 
	    }
		lv_command_20_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_20_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_21='for' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getForStatementAccess().getForKeyword_2_0());
    }
(	otherlv_22='each' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getForStatementAccess().getEachKeyword_2_1());
    }
)?	otherlv_23='(' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		lv_nameForin_24_0=RULE_ID
		{
			newLeafNode(lv_nameForin_24_0, grammarAccess.getForStatementAccess().getNameForinIDTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameForin",
        		lv_nameForin_24_0, 
        		"ID");
	    }

)
)	otherlv_25='in' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getInKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForinexprExpressionParserRuleCall_2_5_0()); 
	    }
		lv_forinexpr_26_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forinexpr",
        		lv_forinexpr_26_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_2_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForcommandStatementsBlockParserRuleCall_2_7_0()); 
	    }
		lv_forcommand_28_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"forcommand",
        		lv_forcommand_28_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_29='for' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getForStatementAccess().getForKeyword_3_0());
    }
(	otherlv_30='each' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getForStatementAccess().getEachKeyword_3_1());
    }
)?	otherlv_31='(' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3_2());
    }
	otherlv_32='var' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getForStatementAccess().getVarKeyword_3_3());
    }
(
(
		lv_nameForeachh_33_0=RULE_ID
		{
			newLeafNode(lv_nameForeachh_33_0, grammarAccess.getForStatementAccess().getNameForeachhIDTerminalRuleCall_3_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameForeachh",
        		lv_nameForeachh_33_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getRelationTypeRelationParserRuleCall_3_5_0()); 
	    }
		lv_relation_34_0=ruletypeRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_34_0, 
        		"typeRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_35='in' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getInKeyword_3_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForeachexprExpressionParserRuleCall_3_7_0()); 
	    }
		lv_foreachexpr_36_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"foreachexpr",
        		lv_foreachexpr_36_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_37=')' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getForeachcommandStatementsBlockParserRuleCall_3_9_0()); 
	    }
		lv_foreachcommand_38_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"foreachcommand",
        		lv_foreachcommand_38_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleidentifierDeclaration
entryRuleidentifierDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierDeclarationRule()); }
	 iv_ruleidentifierDeclaration=ruleidentifierDeclaration 
	 { $current=$iv_ruleidentifierDeclaration.current; } 
	 EOF 
;

// Rule identifierDeclaration
ruleidentifierDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIdentifierDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierDeclarationAccess().getRelationTypeRelationParserRuleCall_1_0()); 
	    }
		lv_relation_1_0=ruletypeRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierDeclarationRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"typeRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifierDeclarationAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierDeclarationAccess().getExprExprOrObjectLiteralParserRuleCall_2_1_0()); 
	    }
		lv_expr_3_0=ruleexprOrObjectLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierDeclarationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"exprOrObjectLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulecommaExpr
entryRulecommaExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommaExprRule()); }
	 iv_rulecommaExpr=rulecommaExpr 
	 { $current=$iv_rulecommaExpr.current; } 
	 EOF 
;

// Rule commaExpr
rulecommaExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommaExprAccess().getElementsExpressionParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommaExprRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommaExprAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommaExprAccess().getElementsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommaExprRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileStatementRule()); }
	 iv_ruleDoWhileStatement=ruleDoWhileStatement 
	 { $current=$iv_ruleDoWhileStatement.current; } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDoWhileStatementAccess().getWhileAction_0(),
            $current);
    }
)	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDoWhileStatementAccess().getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getWhileBlockStatementsBlockParserRuleCall_2_0()); 
	    }
		lv_whileBlock_2_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"whileBlock",
        		lv_whileBlock_2_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='while' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileStatementAccess().getWhileKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getCondParenthesizedExprParserRuleCall_4_0()); 
	    }
		lv_cond_4_0=ruleparenthesizedExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_4_0, 
        		"parenthesizedExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWhileStatementAccess().getWhileAction_0(),
            $current);
    }
)	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getWhileKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getCondParenthesizedExprParserRuleCall_2_0()); 
	    }
		lv_cond_2_0=ruleparenthesizedExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_2_0, 
        		"parenthesizedExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getWhileBlockStatementsBlockParserRuleCall_3_0()); 
	    }
		lv_whileBlock_3_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"whileBlock",
        		lv_whileBlock_3_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitchStatementAccess().getSwitchAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getCondParenthesizedExprParserRuleCall_2_0()); 
	    }
		lv_cond_2_0=ruleparenthesizedExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_2_0, 
        		"parenthesizedExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesStatementInSwitchParserRuleCall_4_0()); 
	    }
		lv_cases_4_0=rulestatementInSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_4_0, 
        		"statementInSwitch");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleparenthesizedExpr
entryRuleparenthesizedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExprRule()); }
	 iv_ruleparenthesizedExpr=ruleparenthesizedExpr 
	 { $current=$iv_ruleparenthesizedExpr.current; } 
	 EOF 
;

// Rule parenthesizedExpr
ruleparenthesizedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExprAccess().getExpressionExprOrObjectLiteralParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleexprOrObjectLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExprRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"exprOrObjectLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRulestatementInSwitch
entryRulestatementInSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementInSwitchRule()); }
	 iv_rulestatementInSwitch=rulestatementInSwitch 
	 { $current=$iv_rulestatementInSwitch.current; } 
	 EOF 
;

// Rule statementInSwitch
rulestatementInSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementInSwitchAccess().getStatementParserRuleCall_0()); 
    }
    this_Statement_0=ruleStatement
    { 
        $current = $this_Statement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='case' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementInSwitchAccess().getCaseKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementInSwitchAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementInSwitchAccess().getColonKeyword_1_2());
    }
)
    |(	otherlv_4='default' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementInSwitchAccess().getDefaultKeyword_2_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementInSwitchAccess().getColonKeyword_2_1());
    }
))
;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getAccessAccessLevelEnumRuleCall_0_0()); 
	    }
		lv_access_0_0=ruleAccessLevel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"access",
        		lv_access_0_0, 
        		"AccessLevel");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='static' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getStaticKeyword_1());
    }
)?	otherlv_2='var' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getVarKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeVarTypeParserRuleCall_5_0()); 
	    }
		lv_type_5_0=ruleVarType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"VarType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_6_1_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleVarType
entryRuleVarType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	 iv_ruleVarType=ruleVarType 
	 { $current=$iv_ruleVarType.current; } 
	 EOF 
;

// Rule VarType
ruleVarType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarTypeAccess().getVoidKeyword_0());
    }

    |	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarTypeAccess().getAsteriskKeyword_1());
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVarTypeAccess().getTypeClassCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenBlockIfBlockParserRuleCall_4_0()); 
	    }
		lv_thenBlock_4_0=ruleIfBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenBlock",
        		lv_thenBlock_4_0, 
        		"IfBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockIfBlockParserRuleCall_5_1_0()); 
	    }
		lv_elseBlock_6_0=ruleIfBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_6_0, 
        		"IfBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTryStatement
entryRuleTryStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryStatementRule()); }
	 iv_ruleTryStatement=ruleTryStatement 
	 { $current=$iv_ruleTryStatement.current; } 
	 EOF 
;

// Rule TryStatement
ruleTryStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTryStatementAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTryStatementAccess().getRightCurlyBracketKeyword_3());
    }
(	otherlv_4='catch' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTryStatementAccess().getCatchKeyword_4_0());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTryStatementAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getParamsParameterParserRuleCall_4_2_0()); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTryStatementAccess().getRightParenthesisKeyword_4_3());
    }
)?(	otherlv_8='finally' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTryStatementAccess().getFinallyKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyBlockStatementsBlockParserRuleCall_5_1_0()); 
	    }
		lv_finallyBlock_9_0=ruleStatementsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"finallyBlock",
        		lv_finallyBlock_9_0, 
        		"StatementsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIfBlock
entryRuleIfBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfBlockRule()); }
	 iv_ruleIfBlock=ruleIfBlock 
	 { $current=$iv_ruleIfBlock.current; } 
	 EOF 
;

// Rule IfBlock
ruleIfBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIfBlockAccess().getStatementsStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfBlockAccess().getStatementsBlockParserRuleCall_1()); 
    }
    this_StatementsBlock_1=ruleStatementsBlock
    { 
        $current = $this_StatementsBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatementsBlock
entryRuleStatementsBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementsBlockRule()); }
	 iv_ruleStatementsBlock=ruleStatementsBlock 
	 { $current=$iv_ruleStatementsBlock.current; } 
	 EOF 
;

// Rule StatementsBlock
ruleStatementsBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementsBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementsBlockAccess().getStatementsStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementsBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementsBlockAccess().getRightCurlyBracketKeyword_2());
    }
)
;







// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getConstKeyword_0());
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getRelTypeRelationParserRuleCall_2_0()); 
	    }
		lv_rel_2_0=ruletypeRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"rel",
        		lv_rel_2_0, 
        		"typeRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getLitExprOrObjectLiteralParserRuleCall_3_1_0()); 
	    }
		lv_lit_4_0=ruleexprOrObjectLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_4_0, 
        		"exprOrObjectLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getElementsParameterParserRuleCall_0_0_0()); 
	    }
		lv_elements_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getCommaKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getElementsParameterParserRuleCall_0_1_1_0()); 
	    }
		lv_elements_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
    |(((
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getElementsParameterParserRuleCall_1_0_0_0()); 
	    }
		lv_elements_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParametersAccess().getCommaKeyword_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getElementsParameterParserRuleCall_1_0_1_1_0()); 
	    }
		lv_elements_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getParametersAccess().getCommaKeyword_1_0_2());
    }
)?(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getParametersAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParametersRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getRelTypeRelationParserRuleCall_1_2_0()); 
	    }
		lv_rel_8_0=ruletypeRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		set(
       			$current, 
       			"rel",
        		lv_rel_8_0, 
        		"typeRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuletypeRelation
entryRuletypeRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRelationRule()); }
	 iv_ruletypeRelation=ruletypeRelation 
	 { $current=$iv_ruletypeRelation.current; } 
	 EOF 
;

// Rule typeRelation
ruletypeRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeRelationAccess().getColonKeyword_0());
    }
(	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeRelationAccess().getVoidKeyword_1_0());
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRelationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRelationAccess().getTypeClassCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleobjectLiteral
entryRuleobjectLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectLiteralRule()); }
	 iv_ruleobjectLiteral=ruleobjectLiteral 
	 { $current=$iv_ruleobjectLiteral.current; } 
	 EOF 
;

// Rule objectLiteral
ruleobjectLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getObjectLiteralAccess().getObjectFieldsParserRuleCall_1()); 
    }
    this_objectFields_1=ruleobjectFields
    { 
        $current = $this_objectFields_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleobjectFields
entryRuleobjectFields returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectFieldsRule()); }
	 iv_ruleobjectFields=ruleobjectFields 
	 { $current=$iv_ruleobjectFields.current; } 
	 EOF 
;

// Rule objectFields
ruleobjectFields returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getObjectFieldsAccess().getFieldsObjectFieldParserRuleCall_0_0()); 
	    }
		lv_fields_0_0=ruleobjectField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectFieldsRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_0_0, 
        		"objectField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectFieldsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectFieldsAccess().getFieldsObjectFieldParserRuleCall_1_1_0()); 
	    }
		lv_fields_2_0=ruleobjectField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectFieldsRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"objectField");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleobjectField
entryRuleobjectField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectFieldRule()); }
	 iv_ruleobjectField=ruleobjectField 
	 { $current=$iv_ruleobjectField.current; } 
	 EOF 
;

// Rule objectField
ruleobjectField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getObjectFieldAccess().getIDTerminalRuleCall_0_0()); 
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectFieldAccess().getColonKeyword_0_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getObjectFieldAccess().getExprOrObjectLiteralParserRuleCall_0_2()); 
    }
    this_exprOrObjectLiteral_2=ruleexprOrObjectLiteral
    { 
        $current = $this_exprOrObjectLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getObjectFieldAccess().getSTRINGTerminalRuleCall_1_0()); 
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectFieldAccess().getColonKeyword_1_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getObjectFieldAccess().getExprOrObjectLiteralParserRuleCall_1_2()); 
    }
    this_exprOrObjectLiteral_5=ruleexprOrObjectLiteral
    { 
        $current = $this_exprOrObjectLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(this_INT_6=RULE_INT
    { 
    newLeafNode(this_INT_6, grammarAccess.getObjectFieldAccess().getINTTerminalRuleCall_2_0()); 
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getObjectFieldAccess().getColonKeyword_2_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getObjectFieldAccess().getExprOrObjectLiteralParserRuleCall_2_2()); 
    }
    this_exprOrObjectLiteral_8=ruleexprOrObjectLiteral
    { 
        $current = $this_exprOrObjectLiteral_8.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleexprOrObjectLiteral
entryRuleexprOrObjectLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrObjectLiteralRule()); }
	 iv_ruleexprOrObjectLiteral=ruleexprOrObjectLiteral 
	 { $current=$iv_ruleexprOrObjectLiteral.current; } 
	 EOF 
;

// Rule exprOrObjectLiteral
ruleexprOrObjectLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrObjectLiteralAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrObjectLiteralAccess().getObjectLiteralParserRuleCall_1()); 
    }
    this_objectLiteral_1=ruleobjectLiteral
    { 
        $current = $this_objectLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getSelectionExpressionParserRuleCall_0()); 
    }
    this_SelectionExpression_0=ruleSelectionExpression
    { 
        $current = $this_SelectionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentAccess().getAssignmentLeftAction_1_0(),
            $current);
    }
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSelectionExpression
entryRuleSelectionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionExpressionRule()); }
	 iv_ruleSelectionExpression=ruleSelectionExpression 
	 { $current=$iv_ruleSelectionExpression.current; } 
	 EOF 
;

// Rule SelectionExpression
ruleSelectionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectionExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSelectionExpressionAccess().getMemberSelectionReceiverAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectionExpressionAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSelectionExpressionAccess().getMemberMemberCrossReference_1_2_0()); 
	}

)
)((
(
		lv_methodinvocation_4_0=	'(' 
    {
        newLeafNode(lv_methodinvocation_4_0, grammarAccess.getSelectionExpressionAccess().getMethodinvocationLeftParenthesisKeyword_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionExpressionRule());
	        }
       		setWithLastConsumed($current, "methodinvocation", true, "(");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionExpressionAccess().getArgsExpressionParserRuleCall_1_3_1_0_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectionExpressionAccess().getCommaKeyword_1_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionExpressionAccess().getArgsExpressionParserRuleCall_1_3_1_1_1_0()); 
	    }
		lv_args_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelectionExpressionAccess().getRightParenthesisKeyword_1_3_2());
    }
)?)*)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringConstantAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntConstantAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBoolConstantAction_2_0(),
            $current);
    }
)(
(
(
		lv_value_5_1=	'true' 
    {
        newLeafNode(lv_value_5_1, grammarAccess.getTerminalExpressionAccess().getValueTrueKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_1, null);
	    }

    |		lv_value_5_2=	'false' 
    {
        newLeafNode(lv_value_5_2, grammarAccess.getTerminalExpressionAccess().getValueFalseKeyword_2_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_2, null);
	    }

)

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getThisAction_3_0(),
            $current);
    }
)	otherlv_7='this' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTerminalExpressionAccess().getThisKeyword_3_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getSuperAction_4_0(),
            $current);
    }
)	otherlv_9='super' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTerminalExpressionAccess().getSuperKeyword_4_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getNullAction_5_0(),
            $current);
    }
)	otherlv_11='null' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTerminalExpressionAccess().getNullKeyword_5_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getUndefinedAction_6_0(),
            $current);
    }
)	otherlv_13='undefined' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTerminalExpressionAccess().getUndefinedKeyword_6_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getSymbolRefAction_7_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getTerminalExpressionAccess().getSymbolSymbolCrossReference_7_1_0()); 
	}

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getTerminalOpAction_8_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getTerminalOperatorParserRuleCall_8_1()); 
    }
ruleTerminalOperator
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_18='(' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_9_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_9_1()); 
    }
    this_Expression_19=ruleExpression
    { 
        $current = $this_Expression_19.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_9_2());
    }
))
;





// Entry rule entryRuleTerminalOperator
entryRuleTerminalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalOperatorRule()); } 
	 iv_ruleTerminalOperator=ruleTerminalOperator 
	 { $current=$iv_ruleTerminalOperator.current.getText(); }  
	 EOF 
;

// Rule TerminalOperator
ruleTerminalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getSolidusEqualsSignKeyword_2()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_7()); 
    }

    |
	kw='>>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAmpersandEqualsSignKeyword_9()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getCircumflexAccentEqualsSignKeyword_10()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getVerticalLineEqualsSignKeyword_11()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getQuestionMarkColonKeyword_12()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getVerticalLineVerticalLineKeyword_13()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAmpersandAmpersandKeyword_14()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getVerticalLineKeyword_15()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getCircumflexAccentKeyword_16()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAmpersandKeyword_17()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getEqualsSignEqualsSignKeyword_18()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getExclamationMarkEqualsSignKeyword_19()); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getEqualsSignEqualsSignEqualsSignKeyword_20()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getExclamationMarkEqualsSignEqualsSignKeyword_21()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getLessThanSignKeyword_22()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignKeyword_23()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getLessThanSignEqualsSignKeyword_24()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignEqualsSignKeyword_25()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAsKeyword_26()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getInKeyword_27()); 
    }

    |
	kw='instanceof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getInstanceofKeyword_28()); 
    }

    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getIsKeyword_29()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getLessThanSignLessThanSignKeyword_30()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_31()); 
    }

    |
	kw='>>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_32()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getPlusSignKeyword_33()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getHyphenMinusKeyword_34()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getAsteriskKeyword_35()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getSolidusKeyword_36()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getPercentSignKeyword_37()); 
    }

    |
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getPlusSignPlusSignKeyword_38()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getHyphenMinusHyphenMinusKeyword_39()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getExclamationMarkKeyword_40()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getTildeKeyword_41()); 
    }

    |
	kw='typeof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getTypeofKeyword_42()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getFullStopKeyword_43()); 
    }

    |
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getColonColonKeyword_44()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getQuestionMarkKeyword_45()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalOperatorAccess().getColonKeyword_46()); 
    }
)
    ;





// Rule AccessLevel
ruleAccessLevel returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='private' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='public' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='protected' 
	{
        $current = grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='internal' 
	{
        $current = grammarAccess.getAccessLevelAccess().getINTERNALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAccessLevelAccess().getINTERNALEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


