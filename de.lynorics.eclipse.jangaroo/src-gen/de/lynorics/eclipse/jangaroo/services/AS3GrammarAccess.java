/*
* generated by Xtext
*/
package de.lynorics.eclipse.jangaroo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AS3GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cImpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cImpImportsParserRuleCall_1_0_0 = (RuleCall)cImpAssignment_1_0.eContents().get(0);
		private final Assignment cClassesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cClassesAlternatives_1_1_0 = (Alternatives)cClassesAssignment_1_1.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_1_1_0_0 = (RuleCall)cClassesAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cClassesInterfaceParserRuleCall_1_1_0_1 = (RuleCall)cClassesAlternatives_1_1_0.eContents().get(1);
		
		//Model hidden(WS, ML_COMMENT, SL_COMMENT):
		//	package=Package | imp=Imports classes+=(Class | Interface)*;
		public ParserRule getRule() { return rule; }

		//package=Package | imp=Imports classes+=(Class | Interface)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }

		//imp=Imports classes+=(Class | Interface)*
		public Group getGroup_1() { return cGroup_1; }

		//imp=Imports
		public Assignment getImpAssignment_1_0() { return cImpAssignment_1_0; }

		//Imports
		public RuleCall getImpImportsParserRuleCall_1_0_0() { return cImpImportsParserRuleCall_1_0_0; }

		//classes+=(Class | Interface)*
		public Assignment getClassesAssignment_1_1() { return cClassesAssignment_1_1; }

		//Class | Interface
		public Alternatives getClassesAlternatives_1_1_0() { return cClassesAlternatives_1_1_0; }

		//Class
		public RuleCall getClassesClassParserRuleCall_1_1_0_0() { return cClassesClassParserRuleCall_1_1_0_0; }

		//Interface
		public RuleCall getClassesInterfaceParserRuleCall_1_1_0_1() { return cClassesInterfaceParserRuleCall_1_1_0_1; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImpImportsParserRuleCall_3_0 = (RuleCall)cImpAssignment_3.eContents().get(0);
		private final Assignment cDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectivesDirectiveParserRuleCall_4_0 = (RuleCall)cDirectivesAssignment_4.eContents().get(0);
		private final Assignment cClassesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cClassesAlternatives_5_0 = (Alternatives)cClassesAssignment_5.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_5_0_0 = (RuleCall)cClassesAlternatives_5_0.eContents().get(0);
		private final RuleCall cClassesInterfaceParserRuleCall_5_0_1 = (RuleCall)cClassesAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Package:
		//	"package" name=QualifiedName "{" imp=Imports directives+=directive* classes+=(Class | Interface)* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" imp=Imports directives+=directive* classes+=(Class | Interface)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//imp=Imports
		public Assignment getImpAssignment_3() { return cImpAssignment_3; }

		//Imports
		public RuleCall getImpImportsParserRuleCall_3_0() { return cImpImportsParserRuleCall_3_0; }

		//directives+=directive*
		public Assignment getDirectivesAssignment_4() { return cDirectivesAssignment_4; }

		//directive
		public RuleCall getDirectivesDirectiveParserRuleCall_4_0() { return cDirectivesDirectiveParserRuleCall_4_0; }

		//classes+=(Class | Interface)*
		public Assignment getClassesAssignment_5() { return cClassesAssignment_5; }

		//Class | Interface
		public Alternatives getClassesAlternatives_5_0() { return cClassesAlternatives_5_0; }

		//Class
		public RuleCall getClassesClassParserRuleCall_5_0_0() { return cClassesClassParserRuleCall_5_0_0; }

		//Interface
		public RuleCall getClassesInterfaceParserRuleCall_5_0_1() { return cClassesInterfaceParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		//Imports:
		//	{Imports} imports+=Import*;
		public ParserRule getRule() { return rule; }

		//{Imports} imports+=Import*
		public Group getGroup() { return cGroup; }

		//{Imports}
		public Action getImportsAction_0() { return cImportsAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDirectiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cAnnonFieldsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cAnnonFieldsAnnotationFieldsParserRuleCall_0_3_1_0 = (RuleCall)cAnnonFieldsAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cUsesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//directive:
		//	{directive} "[" name=ID ("(" annonFields=annotationFields ")")? "]" | Uses | ";";
		public ParserRule getRule() { return rule; }

		//{directive} "[" name=ID ("(" annonFields=annotationFields ")")? "]" | Uses | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{directive} "[" name=ID ("(" annonFields=annotationFields ")")? "]"
		public Group getGroup_0() { return cGroup_0; }

		//{directive}
		public Action getDirectiveAction_0_0() { return cDirectiveAction_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//("(" annonFields=annotationFields ")")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3_0() { return cLeftParenthesisKeyword_0_3_0; }

		//annonFields=annotationFields
		public Assignment getAnnonFieldsAssignment_0_3_1() { return cAnnonFieldsAssignment_0_3_1; }

		//annotationFields
		public RuleCall getAnnonFieldsAnnotationFieldsParserRuleCall_0_3_1_0() { return cAnnonFieldsAnnotationFieldsParserRuleCall_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_2() { return cRightParenthesisKeyword_0_3_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }

		//Uses
		public RuleCall getUsesParserRuleCall_1() { return cUsesParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeQualifiedNameParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cVoidKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		
		//Uses:
		//	"use" name=ID (type=QualifiedName | "*" | "void");
		public ParserRule getRule() { return rule; }

		//"use" name=ID (type=QualifiedName | "*" | "void")
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=QualifiedName | "*" | "void"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=QualifiedName
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_2_0_0() { return cTypeQualifiedNameParserRuleCall_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }

		//"void"
		public Keyword getVoidKeyword_2_2() { return cVoidKeyword_2_2; }
	}

	public class AnnotationFieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotationFields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnoonFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnoonFieldsAnnotationFieldParserRuleCall_0_0 = (RuleCall)cAnoonFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnonFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnonFieldsAnnotationFieldParserRuleCall_1_1_0 = (RuleCall)cAnnonFieldsAssignment_1_1.eContents().get(0);
		
		//annotationFields:
		//	anoonFields+=annotationField ("," annonFields+=annotationField)*;
		public ParserRule getRule() { return rule; }

		//anoonFields+=annotationField ("," annonFields+=annotationField)*
		public Group getGroup() { return cGroup; }

		//anoonFields+=annotationField
		public Assignment getAnoonFieldsAssignment_0() { return cAnoonFieldsAssignment_0; }

		//annotationField
		public RuleCall getAnoonFieldsAnnotationFieldParserRuleCall_0_0() { return cAnoonFieldsAnnotationFieldParserRuleCall_0_0; }

		//("," annonFields+=annotationField)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//annonFields+=annotationField
		public Assignment getAnnonFieldsAssignment_1_1() { return cAnnonFieldsAssignment_1_1; }

		//annotationField
		public RuleCall getAnnonFieldsAnnotationFieldParserRuleCall_1_1_0() { return cAnnonFieldsAnnotationFieldParserRuleCall_1_1_0; }
	}

	public class AnnotationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotationField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//annotationField:
		//	name=ID "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" expr=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassInterfaceCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Interface:
		//	access=AccessLevel? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//access=AccessLevel? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//access=AccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }

		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_0_0() { return cAccessAccessLevelEnumRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superclass=[Interface|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclass=[Interface|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }

		//[Interface|QualifiedName]
		public CrossReference getSuperclassInterfaceCrossReference_3_1_0() { return cSuperclassInterfaceCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDynamicKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cClassKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuperTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSuperTypeClassCrossReference_6_1_0 = (CrossReference)cSuperTypeAssignment_6_1.eContents().get(0);
		private final RuleCall cSuperTypeClassQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cSuperTypeClassCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cImplementsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTypesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cTypesInterfaceCrossReference_7_1_0 = (CrossReference)cTypesAssignment_7_1.eContents().get(0);
		private final RuleCall cTypesInterfaceQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cTypesInterfaceCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cTypesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cTypesInterfaceCrossReference_7_2_1_0 = (CrossReference)cTypesAssignment_7_2_1.eContents().get(0);
		private final RuleCall cTypesInterfaceQualifiedNameParserRuleCall_7_2_1_0_1 = (RuleCall)cTypesInterfaceCrossReference_7_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMembersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMembersMemberParserRuleCall_9_0 = (RuleCall)cMembersAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Class:
		//	access=AccessLevel? "final"? "static"? "dynamic"? "class" name=ID ("extends" superType=[Class|QualifiedName])?
		//	("implements" types+=[Interface|QualifiedName] ("," types+=[Interface|QualifiedName])*)? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//access=AccessLevel? "final"? "static"? "dynamic"? "class" name=ID ("extends" superType=[Class|QualifiedName])?
		//("implements" types+=[Interface|QualifiedName] ("," types+=[Interface|QualifiedName])*)? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//access=AccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }

		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_0_0() { return cAccessAccessLevelEnumRuleCall_0_0; }

		//"final"?
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }

		//"static"?
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }

		//"dynamic"?
		public Keyword getDynamicKeyword_3() { return cDynamicKeyword_3; }

		//"class"
		public Keyword getClassKeyword_4() { return cClassKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//("extends" superType=[Class|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//superType=[Class|QualifiedName]
		public Assignment getSuperTypeAssignment_6_1() { return cSuperTypeAssignment_6_1; }

		//[Class|QualifiedName]
		public CrossReference getSuperTypeClassCrossReference_6_1_0() { return cSuperTypeClassCrossReference_6_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeClassQualifiedNameParserRuleCall_6_1_0_1() { return cSuperTypeClassQualifiedNameParserRuleCall_6_1_0_1; }

		//("implements" types+=[Interface|QualifiedName] ("," types+=[Interface|QualifiedName])*)?
		public Group getGroup_7() { return cGroup_7; }

		//"implements"
		public Keyword getImplementsKeyword_7_0() { return cImplementsKeyword_7_0; }

		//types+=[Interface|QualifiedName]
		public Assignment getTypesAssignment_7_1() { return cTypesAssignment_7_1; }

		//[Interface|QualifiedName]
		public CrossReference getTypesInterfaceCrossReference_7_1_0() { return cTypesInterfaceCrossReference_7_1_0; }

		//QualifiedName
		public RuleCall getTypesInterfaceQualifiedNameParserRuleCall_7_1_0_1() { return cTypesInterfaceQualifiedNameParserRuleCall_7_1_0_1; }

		//("," types+=[Interface|QualifiedName])*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//types+=[Interface|QualifiedName]
		public Assignment getTypesAssignment_7_2_1() { return cTypesAssignment_7_2_1; }

		//[Interface|QualifiedName]
		public CrossReference getTypesInterfaceCrossReference_7_2_1_0() { return cTypesInterfaceCrossReference_7_2_1_0; }

		//QualifiedName
		public RuleCall getTypesInterfaceQualifiedNameParserRuleCall_7_2_1_0_1() { return cTypesInterfaceQualifiedNameParserRuleCall_7_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//members+=Member*
		public Assignment getMembersAssignment_9() { return cMembersAssignment_9; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_9_0() { return cMembersMemberParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cMethAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMethMethodParserRuleCall_1_0 = (RuleCall)cMethAssignment_1.eContents().get(0);
		
		//Member:
		//	var=VariableDeclaration | meth=Method;
		public ParserRule getRule() { return rule; }

		//var=VariableDeclaration | meth=Method
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=VariableDeclaration
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_0_0() { return cVarVariableDeclarationParserRuleCall_0_0; }

		//meth=Method
		public Assignment getMethAssignment_1() { return cMethAssignment_1; }

		//Method
		public RuleCall getMethMethodParserRuleCall_1_0() { return cMethMethodParserRuleCall_1_0; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessLevelEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Keyword cNativeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStaticKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cGetKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cSetKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cParamsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_8_0_0 = (RuleCall)cParamsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cParamsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_8_1_1_0 = (RuleCall)cParamsAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Alternatives cAlternatives_10_1 = (Alternatives)cGroup_10.eContents().get(1);
		private final Keyword cVoidKeyword_10_1_0 = (Keyword)cAlternatives_10_1.eContents().get(0);
		private final Assignment cTypeAssignment_10_1_1 = (Assignment)cAlternatives_10_1.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_10_1_1_0 = (CrossReference)cTypeAssignment_10_1_1.eContents().get(0);
		private final RuleCall cTypeClassQualifiedNameParserRuleCall_10_1_1_0_1 = (RuleCall)cTypeClassCrossReference_10_1_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBodyMethodBodyParserRuleCall_11_0 = (RuleCall)cBodyAssignment_11.eContents().get(0);
		
		//Method:
		//	"override"? access=AccessLevel? "native"? "static"? "function" ("get" | "set")? name=ID "(" (params+=Parameter (","
		//	params+=Parameter)*)? ")" (":" ("void" | type=[Class|QualifiedName]))? body=MethodBody;
		public ParserRule getRule() { return rule; }

		//"override"? access=AccessLevel? "native"? "static"? "function" ("get" | "set")? name=ID "(" (params+=Parameter (","
		//params+=Parameter)*)? ")" (":" ("void" | type=[Class|QualifiedName]))? body=MethodBody
		public Group getGroup() { return cGroup; }

		//"override"?
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }

		//access=AccessLevel?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }

		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_1_0() { return cAccessAccessLevelEnumRuleCall_1_0; }

		//"native"?
		public Keyword getNativeKeyword_2() { return cNativeKeyword_2; }

		//"static"?
		public Keyword getStaticKeyword_3() { return cStaticKeyword_3; }

		//"function"
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }

		//("get" | "set")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"get"
		public Keyword getGetKeyword_5_0() { return cGetKeyword_5_0; }

		//"set"
		public Keyword getSetKeyword_5_1() { return cSetKeyword_5_1; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_8() { return cGroup_8; }

		//params+=Parameter
		public Assignment getParamsAssignment_8_0() { return cParamsAssignment_8_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_8_0_0() { return cParamsParameterParserRuleCall_8_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_8_1_1() { return cParamsAssignment_8_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_8_1_1_0() { return cParamsParameterParserRuleCall_8_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//(":" ("void" | type=[Class|QualifiedName]))?
		public Group getGroup_10() { return cGroup_10; }

		//":"
		public Keyword getColonKeyword_10_0() { return cColonKeyword_10_0; }

		//"void" | type=[Class|QualifiedName]
		public Alternatives getAlternatives_10_1() { return cAlternatives_10_1; }

		//"void"
		public Keyword getVoidKeyword_10_1_0() { return cVoidKeyword_10_1_0; }

		//type=[Class|QualifiedName]
		public Assignment getTypeAssignment_10_1_1() { return cTypeAssignment_10_1_1; }

		//[Class|QualifiedName]
		public CrossReference getTypeClassCrossReference_10_1_1_0() { return cTypeClassCrossReference_10_1_1_0; }

		//QualifiedName
		public RuleCall getTypeClassQualifiedNameParserRuleCall_10_1_1_0_1() { return cTypeClassQualifiedNameParserRuleCall_10_1_1_0_1; }

		//body=MethodBody
		public Assignment getBodyAssignment_11() { return cBodyAssignment_11; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_11_0() { return cBodyMethodBodyParserRuleCall_11_0; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodBody:
		//	{MethodBody} "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{MethodBody} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{MethodBody}
		public Action getMethodBodyAction_0() { return cMethodBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSwitchStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTryStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWhileStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDoWhileStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cForStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNewStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cObjectLiteralParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Statement:
		//	VariableDeclaration | Return | Expression ";" | IfStatement | SwitchStatement | TryStatement | WhileStatement |
		//	DoWhileStatement | ForStatement | NewStatement | objectLiteral;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | Return | Expression ";" | IfStatement | SwitchStatement | TryStatement | WhileStatement |
		//DoWhileStatement | ForStatement | NewStatement | objectLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//Return
		public RuleCall getReturnParserRuleCall_1() { return cReturnParserRuleCall_1; }

		//Expression ";"
		public Group getGroup_2() { return cGroup_2; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_0() { return cExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_3() { return cIfStatementParserRuleCall_3; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_4() { return cSwitchStatementParserRuleCall_4; }

		//TryStatement
		public RuleCall getTryStatementParserRuleCall_5() { return cTryStatementParserRuleCall_5; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_6() { return cWhileStatementParserRuleCall_6; }

		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_7() { return cDoWhileStatementParserRuleCall_7; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_8() { return cForStatementParserRuleCall_8; }

		//NewStatement
		public RuleCall getNewStatementParserRuleCall_9() { return cNewStatementParserRuleCall_9; }

		//objectLiteral
		public RuleCall getObjectLiteralParserRuleCall_10() { return cObjectLiteralParserRuleCall_10; }
	}

	public class NewStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNewAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeClassQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamParametersParserRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//NewStatement:
		//	{New} "new" type=[Class|QualifiedName] ("(" param=Parameters? ")")?;
		public ParserRule getRule() { return rule; }

		//{New} "new" type=[Class|QualifiedName] ("(" param=Parameters? ")")?
		public Group getGroup() { return cGroup; }

		//{New}
		public Action getNewAction_0() { return cNewAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//type=[Class|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Class|QualifiedName]
		public CrossReference getTypeClassCrossReference_2_0() { return cTypeClassCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeClassQualifiedNameParserRuleCall_2_0_1() { return cTypeClassQualifiedNameParserRuleCall_2_0_1; }

		//("(" param=Parameters? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//param=Parameters?
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }

		//Parameters
		public RuleCall getParamParametersParserRuleCall_3_1_0() { return cParamParametersParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cForinitAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cForinitCommaExprParserRuleCall_0_2_0 = (RuleCall)cForinitAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cConditionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cConditionCommaExprParserRuleCall_0_4_0 = (RuleCall)cConditionAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cIteratorAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cIteratorCommaExprParserRuleCall_0_6_0 = (RuleCall)cIteratorAssignment_0_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Assignment cCommandAssignment_0_8 = (Assignment)cGroup_0.eContents().get(8);
		private final RuleCall cCommandStatementsBlockParserRuleCall_0_8_0 = (RuleCall)cCommandAssignment_0_8.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVarKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElementsIdentifierDeclarationParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cElementsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cElementsIdentifierDeclarationParserRuleCall_1_4_1_0 = (RuleCall)cElementsAssignment_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cConditionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cConditionCommaExprParserRuleCall_1_6_0 = (RuleCall)cConditionAssignment_1_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cIteratorAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cIteratorCommaExprParserRuleCall_1_8_0 = (RuleCall)cIteratorAssignment_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Assignment cCommandAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cCommandStatementsBlockParserRuleCall_1_10_0 = (RuleCall)cCommandAssignment_1_10.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEachKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameForinAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameForinIDTerminalRuleCall_2_3_0 = (RuleCall)cNameForinAssignment_2_3.eContents().get(0);
		private final Keyword cInKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cForinexprAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cForinexprExpressionParserRuleCall_2_5_0 = (RuleCall)cForinexprAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cForcommandAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cForcommandStatementsBlockParserRuleCall_2_7_0 = (RuleCall)cForcommandAssignment_2_7.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEachKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cVarKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cNameForeachhAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cNameForeachhIDTerminalRuleCall_3_4_0 = (RuleCall)cNameForeachhAssignment_3_4.eContents().get(0);
		private final Assignment cRelationAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cRelationTypeRelationParserRuleCall_3_5_0 = (RuleCall)cRelationAssignment_3_5.eContents().get(0);
		private final Keyword cInKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cForeachexprAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cForeachexprExpressionParserRuleCall_3_7_0 = (RuleCall)cForeachexprAssignment_3_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Assignment cForeachcommandAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cForeachcommandStatementsBlockParserRuleCall_3_9_0 = (RuleCall)cForeachcommandAssignment_3_9.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" forinit=commaExpr? ";" condition=commaExpr? ";" iterator=commaExpr? ")" command=StatementsBlock | "for" "("
		//	"var" elements+=identifierDeclaration ("," elements+=identifierDeclaration)* ";" condition=commaExpr? ";"
		//	iterator=commaExpr? ")" command=StatementsBlock | "for" "each"? "(" nameForin=ID "in" forinexpr=Expression ")"
		//	forcommand=StatementsBlock | "for" "each"? "(" "var" nameForeachh=ID relation=typeRelation? "in"
		//	foreachexpr=Expression ")" foreachcommand=StatementsBlock;
		public ParserRule getRule() { return rule; }

		//"for" "(" forinit=commaExpr? ";" condition=commaExpr? ";" iterator=commaExpr? ")" command=StatementsBlock | "for" "("
		//"var" elements+=identifierDeclaration ("," elements+=identifierDeclaration)* ";" condition=commaExpr? ";"
		//iterator=commaExpr? ")" command=StatementsBlock | "for" "each"? "(" nameForin=ID "in" forinexpr=Expression ")"
		//forcommand=StatementsBlock | "for" "each"? "(" "var" nameForeachh=ID relation=typeRelation? "in" foreachexpr=Expression
		//")" foreachcommand=StatementsBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//"for" "(" forinit=commaExpr? ";" condition=commaExpr? ";" iterator=commaExpr? ")" command=StatementsBlock
		public Group getGroup_0() { return cGroup_0; }

		//"for"
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//forinit=commaExpr?
		public Assignment getForinitAssignment_0_2() { return cForinitAssignment_0_2; }

		//commaExpr
		public RuleCall getForinitCommaExprParserRuleCall_0_2_0() { return cForinitCommaExprParserRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//condition=commaExpr?
		public Assignment getConditionAssignment_0_4() { return cConditionAssignment_0_4; }

		//commaExpr
		public RuleCall getConditionCommaExprParserRuleCall_0_4_0() { return cConditionCommaExprParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//iterator=commaExpr?
		public Assignment getIteratorAssignment_0_6() { return cIteratorAssignment_0_6; }

		//commaExpr
		public RuleCall getIteratorCommaExprParserRuleCall_0_6_0() { return cIteratorCommaExprParserRuleCall_0_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }

		//command=StatementsBlock
		public Assignment getCommandAssignment_0_8() { return cCommandAssignment_0_8; }

		//StatementsBlock
		public RuleCall getCommandStatementsBlockParserRuleCall_0_8_0() { return cCommandStatementsBlockParserRuleCall_0_8_0; }

		//"for" "(" "var" elements+=identifierDeclaration ("," elements+=identifierDeclaration)* ";" condition=commaExpr? ";"
		//iterator=commaExpr? ")" command=StatementsBlock
		public Group getGroup_1() { return cGroup_1; }

		//"for"
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"var"
		public Keyword getVarKeyword_1_2() { return cVarKeyword_1_2; }

		//elements+=identifierDeclaration
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }

		//identifierDeclaration
		public RuleCall getElementsIdentifierDeclarationParserRuleCall_1_3_0() { return cElementsIdentifierDeclarationParserRuleCall_1_3_0; }

		//("," elements+=identifierDeclaration)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//elements+=identifierDeclaration
		public Assignment getElementsAssignment_1_4_1() { return cElementsAssignment_1_4_1; }

		//identifierDeclaration
		public RuleCall getElementsIdentifierDeclarationParserRuleCall_1_4_1_0() { return cElementsIdentifierDeclarationParserRuleCall_1_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//condition=commaExpr?
		public Assignment getConditionAssignment_1_6() { return cConditionAssignment_1_6; }

		//commaExpr
		public RuleCall getConditionCommaExprParserRuleCall_1_6_0() { return cConditionCommaExprParserRuleCall_1_6_0; }

		//";"
		public Keyword getSemicolonKeyword_1_7() { return cSemicolonKeyword_1_7; }

		//iterator=commaExpr?
		public Assignment getIteratorAssignment_1_8() { return cIteratorAssignment_1_8; }

		//commaExpr
		public RuleCall getIteratorCommaExprParserRuleCall_1_8_0() { return cIteratorCommaExprParserRuleCall_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_9() { return cRightParenthesisKeyword_1_9; }

		//command=StatementsBlock
		public Assignment getCommandAssignment_1_10() { return cCommandAssignment_1_10; }

		//StatementsBlock
		public RuleCall getCommandStatementsBlockParserRuleCall_1_10_0() { return cCommandStatementsBlockParserRuleCall_1_10_0; }

		//"for" "each"? "(" nameForin=ID "in" forinexpr=Expression ")" forcommand=StatementsBlock
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//"each"?
		public Keyword getEachKeyword_2_1() { return cEachKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//nameForin=ID
		public Assignment getNameForinAssignment_2_3() { return cNameForinAssignment_2_3; }

		//ID
		public RuleCall getNameForinIDTerminalRuleCall_2_3_0() { return cNameForinIDTerminalRuleCall_2_3_0; }

		//"in"
		public Keyword getInKeyword_2_4() { return cInKeyword_2_4; }

		//forinexpr=Expression
		public Assignment getForinexprAssignment_2_5() { return cForinexprAssignment_2_5; }

		//Expression
		public RuleCall getForinexprExpressionParserRuleCall_2_5_0() { return cForinexprExpressionParserRuleCall_2_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }

		//forcommand=StatementsBlock
		public Assignment getForcommandAssignment_2_7() { return cForcommandAssignment_2_7; }

		//StatementsBlock
		public RuleCall getForcommandStatementsBlockParserRuleCall_2_7_0() { return cForcommandStatementsBlockParserRuleCall_2_7_0; }

		//"for" "each"? "(" "var" nameForeachh=ID relation=typeRelation? "in" foreachexpr=Expression ")"
		//foreachcommand=StatementsBlock
		public Group getGroup_3() { return cGroup_3; }

		//"for"
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }

		//"each"?
		public Keyword getEachKeyword_3_1() { return cEachKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//"var"
		public Keyword getVarKeyword_3_3() { return cVarKeyword_3_3; }

		//nameForeachh=ID
		public Assignment getNameForeachhAssignment_3_4() { return cNameForeachhAssignment_3_4; }

		//ID
		public RuleCall getNameForeachhIDTerminalRuleCall_3_4_0() { return cNameForeachhIDTerminalRuleCall_3_4_0; }

		//relation=typeRelation?
		public Assignment getRelationAssignment_3_5() { return cRelationAssignment_3_5; }

		//typeRelation
		public RuleCall getRelationTypeRelationParserRuleCall_3_5_0() { return cRelationTypeRelationParserRuleCall_3_5_0; }

		//"in"
		public Keyword getInKeyword_3_6() { return cInKeyword_3_6; }

		//foreachexpr=Expression
		public Assignment getForeachexprAssignment_3_7() { return cForeachexprAssignment_3_7; }

		//Expression
		public RuleCall getForeachexprExpressionParserRuleCall_3_7_0() { return cForeachexprExpressionParserRuleCall_3_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }

		//foreachcommand=StatementsBlock
		public Assignment getForeachcommandAssignment_3_9() { return cForeachcommandAssignment_3_9; }

		//StatementsBlock
		public RuleCall getForeachcommandStatementsBlockParserRuleCall_3_9_0() { return cForeachcommandStatementsBlockParserRuleCall_3_9_0; }
	}

	public class IdentifierDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifierDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationTypeRelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprOrObjectLiteralParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//identifierDeclaration:
		//	name=ID relation=typeRelation? ("=" expr=exprOrObjectLiteral)?;
		public ParserRule getRule() { return rule; }

		//name=ID relation=typeRelation? ("=" expr=exprOrObjectLiteral)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//relation=typeRelation?
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }

		//typeRelation
		public RuleCall getRelationTypeRelationParserRuleCall_1_0() { return cRelationTypeRelationParserRuleCall_1_0; }

		//("=" expr=exprOrObjectLiteral)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expr=exprOrObjectLiteral
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//exprOrObjectLiteral
		public RuleCall getExprExprOrObjectLiteralParserRuleCall_2_1_0() { return cExprExprOrObjectLiteralParserRuleCall_2_1_0; }
	}

	public class CommaExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "commaExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//commaExpr:
		//	elements+=Expression ("," elements+=Expression)*;
		public ParserRule getRule() { return rule; }

		//elements+=Expression ("," elements+=Expression)*
		public Group getGroup() { return cGroup; }

		//elements+=Expression
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_0_0() { return cElementsExpressionParserRuleCall_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_1_0() { return cElementsExpressionParserRuleCall_1_1_0; }
	}

	public class DoWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhileBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhileBlockStatementsBlockParserRuleCall_2_0 = (RuleCall)cWhileBlockAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondParenthesizedExprParserRuleCall_4_0 = (RuleCall)cCondAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DoWhileStatement:
		//	{While} "do" whileBlock=StatementsBlock "while" cond=parenthesizedExpr ";";
		public ParserRule getRule() { return rule; }

		//{While} "do" whileBlock=StatementsBlock "while" cond=parenthesizedExpr ";"
		public Group getGroup() { return cGroup; }

		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//whileBlock=StatementsBlock
		public Assignment getWhileBlockAssignment_2() { return cWhileBlockAssignment_2; }

		//StatementsBlock
		public RuleCall getWhileBlockStatementsBlockParserRuleCall_2_0() { return cWhileBlockStatementsBlockParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//cond=parenthesizedExpr
		public Assignment getCondAssignment_4() { return cCondAssignment_4; }

		//parenthesizedExpr
		public RuleCall getCondParenthesizedExprParserRuleCall_4_0() { return cCondParenthesizedExprParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondParenthesizedExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cWhileBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhileBlockStatementsBlockParserRuleCall_3_0 = (RuleCall)cWhileBlockAssignment_3.eContents().get(0);
		
		//WhileStatement:
		//	{While} "while" cond=parenthesizedExpr whileBlock=StatementsBlock;
		public ParserRule getRule() { return rule; }

		//{While} "while" cond=parenthesizedExpr whileBlock=StatementsBlock
		public Group getGroup() { return cGroup; }

		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//cond=parenthesizedExpr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//parenthesizedExpr
		public RuleCall getCondParenthesizedExprParserRuleCall_2_0() { return cCondParenthesizedExprParserRuleCall_2_0; }

		//whileBlock=StatementsBlock
		public Assignment getWhileBlockAssignment_3() { return cWhileBlockAssignment_3; }

		//StatementsBlock
		public RuleCall getWhileBlockStatementsBlockParserRuleCall_3_0() { return cWhileBlockStatementsBlockParserRuleCall_3_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondParenthesizedExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesStatementInSwitchParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SwitchStatement:
		//	{Switch} "switch" cond=parenthesizedExpr "{" cases+=statementInSwitch* "}";
		public ParserRule getRule() { return rule; }

		//{Switch} "switch" cond=parenthesizedExpr "{" cases+=statementInSwitch* "}"
		public Group getGroup() { return cGroup; }

		//{Switch}
		public Action getSwitchAction_0() { return cSwitchAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//cond=parenthesizedExpr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//parenthesizedExpr
		public RuleCall getCondParenthesizedExprParserRuleCall_2_0() { return cCondParenthesizedExprParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=statementInSwitch*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//statementInSwitch
		public RuleCall getCasesStatementInSwitchParserRuleCall_4_0() { return cCasesStatementInSwitchParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParenthesizedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parenthesizedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExprOrObjectLiteralParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parenthesizedExpr:
		//	"(" expression=exprOrObjectLiteral ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=exprOrObjectLiteral ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=exprOrObjectLiteral
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//exprOrObjectLiteral
		public RuleCall getExpressionExprOrObjectLiteralParserRuleCall_1_0() { return cExpressionExprOrObjectLiteralParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class StatementInSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statementInSwitch");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDefaultKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//statementInSwitch:
		//	Statement | "case" Expression ":" | "default" ":";
		public ParserRule getRule() { return rule; }

		//Statement | "case" Expression ":" | "default" ":"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//"case" Expression ":"
		public Group getGroup_1() { return cGroup_1; }

		//"case"
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//"default" ":"
		public Group getGroup_2() { return cGroup_2; }

		//"default"
		public Keyword getDefaultKeyword_2_0() { return cDefaultKeyword_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Return:
		//	"return" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAccessLevelEnumRuleCall_0_0 = (RuleCall)cAccessAssignment_0.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeVarTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VariableDeclaration:
		//	access=AccessLevel? "static"? "var" name=ID ":" type=VarType ("=" expression=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//access=AccessLevel? "static"? "var" name=ID ":" type=VarType ("=" expression=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//access=AccessLevel?
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }

		//AccessLevel
		public RuleCall getAccessAccessLevelEnumRuleCall_0_0() { return cAccessAccessLevelEnumRuleCall_0_0; }

		//"static"?
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=VarType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_5_0() { return cTypeVarTypeParserRuleCall_5_0; }

		//("=" expression=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_1_0() { return cExpressionExpressionParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cTypeClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeClassQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeClassCrossReference_2_0.eContents().get(1);
		
		//VarType:
		//	"void" | "*" | type=[Class|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"void" | "*" | type=[Class|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//type=[Class|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Class|QualifiedName]
		public CrossReference getTypeClassCrossReference_2_0() { return cTypeClassCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeClassQualifiedNameParserRuleCall_2_0_1() { return cTypeClassQualifiedNameParserRuleCall_2_0_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" expression=Expression ")" thenBlock=IfBlock ("else" elseBlock=IfBlock)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expression=Expression ")" thenBlock=IfBlock ("else" elseBlock=IfBlock)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenBlock=IfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//IfBlock
		public RuleCall getThenBlockIfBlockParserRuleCall_4_0() { return cThenBlockIfBlockParserRuleCall_4_0; }

		//(=> "else" elseBlock=IfBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBlock=IfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }

		//IfBlock
		public RuleCall getElseBlockIfBlockParserRuleCall_5_1_0() { return cElseBlockIfBlockParserRuleCall_5_1_0; }
	}

	public class TryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCatchKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParamsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParamsParameterParserRuleCall_4_2_0 = (RuleCall)cParamsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFinallyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFinallyBlockStatementsBlockParserRuleCall_5_1_0 = (RuleCall)cFinallyBlockAssignment_5_1.eContents().get(0);
		
		//TryStatement:
		//	"try" "{" statements+=Statement+ "}" ("catch" "(" params+=Parameter ")")? ("finally" finallyBlock=StatementsBlock)?;
		public ParserRule getRule() { return rule; }

		//"try" "{" statements+=Statement+ "}" ("catch" "(" params+=Parameter ")")? ("finally" finallyBlock=StatementsBlock)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//("catch" "(" params+=Parameter ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"catch"
		public Keyword getCatchKeyword_4_0() { return cCatchKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_2() { return cParamsAssignment_4_2; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_2_0() { return cParamsParameterParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//("finally" finallyBlock=StatementsBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//"finally"
		public Keyword getFinallyKeyword_5_0() { return cFinallyKeyword_5_0; }

		//finallyBlock=StatementsBlock
		public Assignment getFinallyBlockAssignment_5_1() { return cFinallyBlockAssignment_5_1; }

		//StatementsBlock
		public RuleCall getFinallyBlockStatementsBlockParserRuleCall_5_1_0() { return cFinallyBlockStatementsBlockParserRuleCall_5_1_0; }
	}

	public class IfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cStatementsBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IfBlock:
		//	statements+=Statement | StatementsBlock;
		public ParserRule getRule() { return rule; }

		//statements+=Statement | StatementsBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//statements+=Statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }

		//StatementsBlock
		public RuleCall getStatementsBlockParserRuleCall_1() { return cStatementsBlockParserRuleCall_1; }
	}

	public class StatementsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StatementsBlock:
		//	"{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	MethodBody | IfBlock;
		public ParserRule getRule() { return rule; }

		//MethodBody | IfBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodBody
		public RuleCall getMethodBodyParserRuleCall_0() { return cMethodBodyParserRuleCall_0; }

		//IfBlock
		public RuleCall getIfBlockParserRuleCall_1() { return cIfBlockParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelTypeRelationParserRuleCall_2_0 = (RuleCall)cRelAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLitExprOrObjectLiteralParserRuleCall_3_1_0 = (RuleCall)cLitAssignment_3_1.eContents().get(0);
		
		//Parameter:
		//	"const"? name=ID rel=typeRelation? ("=" lit=exprOrObjectLiteral)?;
		public ParserRule getRule() { return rule; }

		//"const"? name=ID rel=typeRelation? ("=" lit=exprOrObjectLiteral)?
		public Group getGroup() { return cGroup; }

		//"const"?
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//rel=typeRelation?
		public Assignment getRelAssignment_2() { return cRelAssignment_2; }

		//typeRelation
		public RuleCall getRelTypeRelationParserRuleCall_2_0() { return cRelTypeRelationParserRuleCall_2_0; }

		//("=" lit=exprOrObjectLiteral)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//lit=exprOrObjectLiteral
		public Assignment getLitAssignment_3_1() { return cLitAssignment_3_1; }

		//exprOrObjectLiteral
		public RuleCall getLitExprOrObjectLiteralParserRuleCall_3_1_0() { return cLitExprOrObjectLiteralParserRuleCall_3_1_0; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cElementsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cElementsParameterParserRuleCall_0_0_0 = (RuleCall)cElementsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cElementsParameterParserRuleCall_0_1_1_0 = (RuleCall)cElementsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cElementsParameterParserRuleCall_1_0_0_0 = (RuleCall)cElementsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cElementsParameterParserRuleCall_1_0_1_1_0 = (RuleCall)cElementsAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cRelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelTypeRelationParserRuleCall_1_2_0 = (RuleCall)cRelAssignment_1_2.eContents().get(0);
		
		//Parameters:
		//	(elements+=Parameter ("," elements+=Parameter)*)? | (elements+=Parameter ("," elements+=Parameter)* ",")? name=ID
		//	rel=typeRelation?;
		public ParserRule getRule() { return rule; }

		//(elements+=Parameter ("," elements+=Parameter)*)? | (elements+=Parameter ("," elements+=Parameter)* ",")? name=ID
		//rel=typeRelation?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(elements+=Parameter ("," elements+=Parameter)*)?
		public Group getGroup_0() { return cGroup_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_0_0() { return cElementsAssignment_0_0; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_0_0_0() { return cElementsParameterParserRuleCall_0_0_0; }

		//("," elements+=Parameter)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_0_1_1() { return cElementsAssignment_0_1_1; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_0_1_1_0() { return cElementsParameterParserRuleCall_0_1_1_0; }

		//(elements+=Parameter ("," elements+=Parameter)* ",")? name=ID rel=typeRelation?
		public Group getGroup_1() { return cGroup_1; }

		//(elements+=Parameter ("," elements+=Parameter)* ",")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_1_0_0() { return cElementsAssignment_1_0_0; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_1_0_0_0() { return cElementsParameterParserRuleCall_1_0_0_0; }

		//("," elements+=Parameter)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//elements+=Parameter
		public Assignment getElementsAssignment_1_0_1_1() { return cElementsAssignment_1_0_1_1; }

		//Parameter
		public RuleCall getElementsParameterParserRuleCall_1_0_1_1_0() { return cElementsParameterParserRuleCall_1_0_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_0_2() { return cCommaKeyword_1_0_2; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//rel=typeRelation?
		public Assignment getRelAssignment_1_2() { return cRelAssignment_1_2; }

		//typeRelation
		public RuleCall getRelTypeRelationParserRuleCall_1_2_0() { return cRelTypeRelationParserRuleCall_1_2_0; }
	}

	public class TypeRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVoidKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeClassQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cTypeClassCrossReference_1_1_0.eContents().get(1);
		
		//typeRelation:
		//	":" ("void" | type=[Class|QualifiedName]);
		public ParserRule getRule() { return rule; }

		//":" ("void" | type=[Class|QualifiedName])
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//"void" | type=[Class|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"void"
		public Keyword getVoidKeyword_1_0() { return cVoidKeyword_1_0; }

		//type=[Class|QualifiedName]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[Class|QualifiedName]
		public CrossReference getTypeClassCrossReference_1_1_0() { return cTypeClassCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getTypeClassQualifiedNameParserRuleCall_1_1_0_1() { return cTypeClassQualifiedNameParserRuleCall_1_1_0_1; }
	}

	public class ObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "objectLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObjectFieldsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//objectLiteral:
		//	"{" objectFields "}";
		public ParserRule getRule() { return rule; }

		//"{" objectFields "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//objectFields
		public RuleCall getObjectFieldsParserRuleCall_1() { return cObjectFieldsParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ObjectFieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "objectFields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsObjectFieldParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsObjectFieldParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//objectFields:
		//	fields+=objectField ("," fields+=objectField)*;
		public ParserRule getRule() { return rule; }

		//fields+=objectField ("," fields+=objectField)*
		public Group getGroup() { return cGroup; }

		//fields+=objectField
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }

		//objectField
		public RuleCall getFieldsObjectFieldParserRuleCall_0_0() { return cFieldsObjectFieldParserRuleCall_0_0; }

		//("," fields+=objectField)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//fields+=objectField
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }

		//objectField
		public RuleCall getFieldsObjectFieldParserRuleCall_1_1_0() { return cFieldsObjectFieldParserRuleCall_1_1_0; }
	}

	public class ObjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "objectField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprOrObjectLiteralParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprOrObjectLiteralParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cExprOrObjectLiteralParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//objectField:
		//	ID ":" exprOrObjectLiteral | STRING ":" exprOrObjectLiteral | INT ":" exprOrObjectLiteral;
		public ParserRule getRule() { return rule; }

		//ID ":" exprOrObjectLiteral | STRING ":" exprOrObjectLiteral | INT ":" exprOrObjectLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID ":" exprOrObjectLiteral
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//exprOrObjectLiteral
		public RuleCall getExprOrObjectLiteralParserRuleCall_0_2() { return cExprOrObjectLiteralParserRuleCall_0_2; }

		//STRING ":" exprOrObjectLiteral
		public Group getGroup_1() { return cGroup_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//exprOrObjectLiteral
		public RuleCall getExprOrObjectLiteralParserRuleCall_1_2() { return cExprOrObjectLiteralParserRuleCall_1_2; }

		//INT ":" exprOrObjectLiteral
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//exprOrObjectLiteral
		public RuleCall getExprOrObjectLiteralParserRuleCall_2_2() { return cExprOrObjectLiteralParserRuleCall_2_2; }
	}

	public class ExprOrObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exprOrObjectLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//exprOrObjectLiteral:
		//	Expression | objectLiteral;
		public ParserRule getRule() { return rule; }

		//Expression | objectLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//objectLiteral
		public RuleCall getObjectLiteralParserRuleCall_1() { return cObjectLiteralParserRuleCall_1; }
	}

	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Symbol:
		//	VariableDeclaration | Parameter;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		public ParserRule getRule() { return rule; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assignment returns Expression:
		//	SelectionExpression ({Assignment.left=current} "=" right=Expression)?;
		public ParserRule getRule() { return rule; }

		//SelectionExpression ({Assignment.left=current} "=" right=Expression)?
		public Group getGroup() { return cGroup; }

		//SelectionExpression
		public RuleCall getSelectionExpressionParserRuleCall_0() { return cSelectionExpressionParserRuleCall_0; }

		//({Assignment.left=current} "=" right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0() { return cAssignmentLeftAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}

	public class SelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cMethodinvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cMethodinvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//SelectionExpression returns Expression:
		//	TerminalExpression ({MemberSelection.receiver=current} "." member=[Member] (methodinvocation?="(" (args+=Expression
		//	("," args+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({MemberSelection.receiver=current} "." member=[Member] (methodinvocation?="(" (args+=Expression (","
		//args+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({MemberSelection.receiver=current} "." member=[Member] (methodinvocation?="(" (args+=Expression (","
		//args+=Expression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{MemberSelection.receiver=current}
		public Action getMemberSelectionReceiverAction_1_0() { return cMemberSelectionReceiverAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//member=[Member]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }

		//[Member]
		public CrossReference getMemberMemberCrossReference_1_2_0() { return cMemberMemberCrossReference_1_2_0; }

		//ID
		public RuleCall getMemberMemberIDTerminalRuleCall_1_2_0_1() { return cMemberMemberIDTerminalRuleCall_1_2_0_1; }

		//(methodinvocation?="(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//methodinvocation?="("
		public Assignment getMethodinvocationAssignment_1_3_0() { return cMethodinvocationAssignment_1_3_0; }

		//"("
		public Keyword getMethodinvocationLeftParenthesisKeyword_1_3_0_0() { return cMethodinvocationLeftParenthesisKeyword_1_3_0_0; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_0_0() { return cArgsExpressionParserRuleCall_1_3_1_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsExpressionParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cThisAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cThisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSuperAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSuperKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cUndefinedAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cUndefinedKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cSymbolRefAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cSymbolAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_7_1_0 = (CrossReference)cSymbolAssignment_7_1.eContents().get(0);
		private final RuleCall cSymbolSymbolIDTerminalRuleCall_7_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cTerminalOpAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cTerminalOperatorParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//TerminalExpression returns Expression:
		//	{StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {This} "this" |
		//	{Super} "super" | {Null} "null" | {Undefined} "undefined" | {SymbolRef} symbol=[Symbol] | {TerminalOp}
		//	TerminalOperator | "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//{StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {This} "this" |
		//{Super} "super" | {Null} "null" | {Undefined} "undefined" | {SymbolRef} symbol=[Symbol] | {TerminalOp} TerminalOperator
		//| "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{StringConstant}
		public Action getStringConstantAction_0_0() { return cStringConstantAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{IntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntConstant}
		public Action getIntConstantAction_1_0() { return cIntConstantAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{BoolConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{This} "this"
		public Group getGroup_3() { return cGroup_3; }

		//{This}
		public Action getThisAction_3_0() { return cThisAction_3_0; }

		//"this"
		public Keyword getThisKeyword_3_1() { return cThisKeyword_3_1; }

		//{Super} "super"
		public Group getGroup_4() { return cGroup_4; }

		//{Super}
		public Action getSuperAction_4_0() { return cSuperAction_4_0; }

		//"super"
		public Keyword getSuperKeyword_4_1() { return cSuperKeyword_4_1; }

		//{Null} "null"
		public Group getGroup_5() { return cGroup_5; }

		//{Null}
		public Action getNullAction_5_0() { return cNullAction_5_0; }

		//"null"
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }

		//{Undefined} "undefined"
		public Group getGroup_6() { return cGroup_6; }

		//{Undefined}
		public Action getUndefinedAction_6_0() { return cUndefinedAction_6_0; }

		//"undefined"
		public Keyword getUndefinedKeyword_6_1() { return cUndefinedKeyword_6_1; }

		//{SymbolRef} symbol=[Symbol]
		public Group getGroup_7() { return cGroup_7; }

		//{SymbolRef}
		public Action getSymbolRefAction_7_0() { return cSymbolRefAction_7_0; }

		//symbol=[Symbol]
		public Assignment getSymbolAssignment_7_1() { return cSymbolAssignment_7_1; }

		//[Symbol]
		public CrossReference getSymbolSymbolCrossReference_7_1_0() { return cSymbolSymbolCrossReference_7_1_0; }

		//ID
		public RuleCall getSymbolSymbolIDTerminalRuleCall_7_1_0_1() { return cSymbolSymbolIDTerminalRuleCall_7_1_0_1; }

		//{TerminalOp} TerminalOperator
		public Group getGroup_8() { return cGroup_8; }

		//{TerminalOp}
		public Action getTerminalOpAction_8_0() { return cTerminalOpAction_8_0; }

		//TerminalOperator
		public RuleCall getTerminalOperatorParserRuleCall_8_1() { return cTerminalOperatorParserRuleCall_8_1; }

		//"(" Expression ")"
		public Group getGroup_9() { return cGroup_9; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_9_1() { return cExpressionParserRuleCall_9_1; }

		//")"
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
	}

	public class TerminalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAmpersandEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCircumflexAccentEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVerticalLineEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cQuestionMarkColonKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cVerticalLineVerticalLineKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAmpersandAmpersandKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cVerticalLineKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cCircumflexAccentKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cAmpersandKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cEqualsSignEqualsSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cExclamationMarkEqualsSignKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cLessThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cGreaterThanSignKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cLessThanSignEqualsSignKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cGreaterThanSignEqualsSignKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cAsKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cInKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cInstanceofKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cIsKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cLessThanSignLessThanSignKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cPlusSignKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cHyphenMinusKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cAsteriskKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cSolidusKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cPercentSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cPlusSignPlusSignKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cHyphenMinusHyphenMinusKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cExclamationMarkKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cTildeKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cTypeofKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cFullStopKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cColonColonKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cQuestionMarkKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cColonKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		
		//TerminalOperator:
		//	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "?:" | "||" | "&&" | "|" | "^"
		//	| "&" | "==" | "!=" | "===" | "!==" | "<" | ">" | "<=" | ">=" | "as" | "in" | "instanceof" | "is" | "<<" | ">>" |
		//	">>>" | "+" | "-" | "*" | "/" | "%" | "++" | "--" | "!" | "~" | "typeof" | "." | "::" | "?" | ":";
		public ParserRule getRule() { return rule; }

		//"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "?:" | "||" | "&&" | "|" | "^" |
		//"&" | "==" | "!=" | "===" | "!==" | "<" | ">" | "<=" | ">=" | "as" | "in" | "instanceof" | "is" | "<<" | ">>" | ">>>" |
		//"+" | "-" | "*" | "/" | "%" | "++" | "--" | "!" | "~" | "typeof" | "." | "::" | "?" | ":"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1() { return cAsteriskEqualsSignKeyword_1; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_2() { return cSolidusEqualsSignKeyword_2; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_3() { return cPercentSignEqualsSignKeyword_3; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_4() { return cPlusSignEqualsSignKeyword_4; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_5() { return cHyphenMinusEqualsSignKeyword_5; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_6() { return cLessThanSignLessThanSignEqualsSignKeyword_6; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_7() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_7; }

		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_9() { return cAmpersandEqualsSignKeyword_9; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_10() { return cCircumflexAccentEqualsSignKeyword_10; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_11() { return cVerticalLineEqualsSignKeyword_11; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_12() { return cQuestionMarkColonKeyword_12; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_13() { return cVerticalLineVerticalLineKeyword_13; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_14() { return cAmpersandAmpersandKeyword_14; }

		//"|"
		public Keyword getVerticalLineKeyword_15() { return cVerticalLineKeyword_15; }

		//"^"
		public Keyword getCircumflexAccentKeyword_16() { return cCircumflexAccentKeyword_16; }

		//"&"
		public Keyword getAmpersandKeyword_17() { return cAmpersandKeyword_17; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_18() { return cEqualsSignEqualsSignKeyword_18; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_19() { return cExclamationMarkEqualsSignKeyword_19; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_20() { return cEqualsSignEqualsSignEqualsSignKeyword_20; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_21() { return cExclamationMarkEqualsSignEqualsSignKeyword_21; }

		//"<"
		public Keyword getLessThanSignKeyword_22() { return cLessThanSignKeyword_22; }

		//">"
		public Keyword getGreaterThanSignKeyword_23() { return cGreaterThanSignKeyword_23; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_24() { return cLessThanSignEqualsSignKeyword_24; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_25() { return cGreaterThanSignEqualsSignKeyword_25; }

		//"as"
		public Keyword getAsKeyword_26() { return cAsKeyword_26; }

		//"in"
		public Keyword getInKeyword_27() { return cInKeyword_27; }

		//"instanceof"
		public Keyword getInstanceofKeyword_28() { return cInstanceofKeyword_28; }

		//"is"
		public Keyword getIsKeyword_29() { return cIsKeyword_29; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_30() { return cLessThanSignLessThanSignKeyword_30; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_31() { return cGreaterThanSignGreaterThanSignKeyword_31; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_32() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_32; }

		//"+"
		public Keyword getPlusSignKeyword_33() { return cPlusSignKeyword_33; }

		//"-"
		public Keyword getHyphenMinusKeyword_34() { return cHyphenMinusKeyword_34; }

		//"*"
		public Keyword getAsteriskKeyword_35() { return cAsteriskKeyword_35; }

		//"/"
		public Keyword getSolidusKeyword_36() { return cSolidusKeyword_36; }

		//"%"
		public Keyword getPercentSignKeyword_37() { return cPercentSignKeyword_37; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_38() { return cPlusSignPlusSignKeyword_38; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_39() { return cHyphenMinusHyphenMinusKeyword_39; }

		//"!"
		public Keyword getExclamationMarkKeyword_40() { return cExclamationMarkKeyword_40; }

		//"~"
		public Keyword getTildeKeyword_41() { return cTildeKeyword_41; }

		//"typeof"
		public Keyword getTypeofKeyword_42() { return cTypeofKeyword_42; }

		//"."
		public Keyword getFullStopKeyword_43() { return cFullStopKeyword_43; }

		//"::"
		public Keyword getColonColonKeyword_44() { return cColonColonKeyword_44; }

		//"?"
		public Keyword getQuestionMarkKeyword_45() { return cQuestionMarkKeyword_45; }

		//":"
		public Keyword getColonKeyword_46() { return cColonKeyword_46; }
	}
	
	
	public class AccessLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AccessLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTERNALInternalKeyword_3_0 = (Keyword)cINTERNALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AccessLevel:
		//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | INTERNAL="internal";
		public EnumRule getRule() { return rule; }

		//PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | INTERNAL="internal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"public"
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }

		//INTERNAL="internal"
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_3() { return cINTERNALEnumLiteralDeclaration_3; }

		//"internal"
		public Keyword getINTERNALInternalKeyword_3_0() { return cINTERNALInternalKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private PackageElements pPackage;
	private ImportsElements pImports;
	private ImportElements pImport;
	private DirectiveElements pDirective;
	private UsesElements pUses;
	private AnnotationFieldsElements pAnnotationFields;
	private AnnotationFieldElements pAnnotationField;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private InterfaceElements pInterface;
	private ClassElements pClass;
	private MemberElements pMember;
	private MethodElements pMethod;
	private AccessLevelElements unknownRuleAccessLevel;
	private MethodBodyElements pMethodBody;
	private StatementElements pStatement;
	private NewStatementElements pNewStatement;
	private ForStatementElements pForStatement;
	private IdentifierDeclarationElements pIdentifierDeclaration;
	private CommaExprElements pCommaExpr;
	private DoWhileStatementElements pDoWhileStatement;
	private WhileStatementElements pWhileStatement;
	private SwitchStatementElements pSwitchStatement;
	private ParenthesizedExprElements pParenthesizedExpr;
	private StatementInSwitchElements pStatementInSwitch;
	private ReturnElements pReturn;
	private VariableDeclarationElements pVariableDeclaration;
	private VarTypeElements pVarType;
	private IfStatementElements pIfStatement;
	private TryStatementElements pTryStatement;
	private IfBlockElements pIfBlock;
	private StatementsBlockElements pStatementsBlock;
	private BlockElements pBlock;
	private ParameterElements pParameter;
	private ParametersElements pParameters;
	private TypeRelationElements pTypeRelation;
	private ObjectLiteralElements pObjectLiteral;
	private ObjectFieldsElements pObjectFields;
	private ObjectFieldElements pObjectField;
	private ExprOrObjectLiteralElements pExprOrObjectLiteral;
	private SymbolElements pSymbol;
	private ExpressionElements pExpression;
	private AssignmentElements pAssignment;
	private SelectionExpressionElements pSelectionExpression;
	private TerminalExpressionElements pTerminalExpression;
	private TerminalOperatorElements pTerminalOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AS3GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.lynorics.eclipse.jangaroo.AS3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model hidden(WS, ML_COMMENT, SL_COMMENT):
	//	package=Package | imp=Imports classes+=(Class | Interface)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Package:
	//	"package" name=QualifiedName "{" imp=Imports directives+=directive* classes+=(Class | Interface)* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Imports:
	//	{Imports} imports+=Import*;
	public ImportsElements getImportsAccess() {
		return (pImports != null) ? pImports : (pImports = new ImportsElements());
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//directive:
	//	{directive} "[" name=ID ("(" annonFields=annotationFields ")")? "]" | Uses | ";";
	public DirectiveElements getDirectiveAccess() {
		return (pDirective != null) ? pDirective : (pDirective = new DirectiveElements());
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}

	//Uses:
	//	"use" name=ID (type=QualifiedName | "*" | "void");
	public UsesElements getUsesAccess() {
		return (pUses != null) ? pUses : (pUses = new UsesElements());
	}
	
	public ParserRule getUsesRule() {
		return getUsesAccess().getRule();
	}

	//annotationFields:
	//	anoonFields+=annotationField ("," annonFields+=annotationField)*;
	public AnnotationFieldsElements getAnnotationFieldsAccess() {
		return (pAnnotationFields != null) ? pAnnotationFields : (pAnnotationFields = new AnnotationFieldsElements());
	}
	
	public ParserRule getAnnotationFieldsRule() {
		return getAnnotationFieldsAccess().getRule();
	}

	//annotationField:
	//	name=ID "=" expr=Expression;
	public AnnotationFieldElements getAnnotationFieldAccess() {
		return (pAnnotationField != null) ? pAnnotationField : (pAnnotationField = new AnnotationFieldElements());
	}
	
	public ParserRule getAnnotationFieldRule() {
		return getAnnotationFieldAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Interface:
	//	access=AccessLevel? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{" members+=Member* "}";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Class:
	//	access=AccessLevel? "final"? "static"? "dynamic"? "class" name=ID ("extends" superType=[Class|QualifiedName])?
	//	("implements" types+=[Interface|QualifiedName] ("," types+=[Interface|QualifiedName])*)? "{" members+=Member* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Member:
	//	var=VariableDeclaration | meth=Method;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Method:
	//	"override"? access=AccessLevel? "native"? "static"? "function" ("get" | "set")? name=ID "(" (params+=Parameter (","
	//	params+=Parameter)*)? ")" (":" ("void" | type=[Class|QualifiedName]))? body=MethodBody;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//enum AccessLevel:
	//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | INTERNAL="internal";
	public AccessLevelElements getAccessLevelAccess() {
		return (unknownRuleAccessLevel != null) ? unknownRuleAccessLevel : (unknownRuleAccessLevel = new AccessLevelElements());
	}
	
	public EnumRule getAccessLevelRule() {
		return getAccessLevelAccess().getRule();
	}

	//MethodBody:
	//	{MethodBody} "{" statements+=Statement* "}";
	public MethodBodyElements getMethodBodyAccess() {
		return (pMethodBody != null) ? pMethodBody : (pMethodBody = new MethodBodyElements());
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//Statement:
	//	VariableDeclaration | Return | Expression ";" | IfStatement | SwitchStatement | TryStatement | WhileStatement |
	//	DoWhileStatement | ForStatement | NewStatement | objectLiteral;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//NewStatement:
	//	{New} "new" type=[Class|QualifiedName] ("(" param=Parameters? ")")?;
	public NewStatementElements getNewStatementAccess() {
		return (pNewStatement != null) ? pNewStatement : (pNewStatement = new NewStatementElements());
	}
	
	public ParserRule getNewStatementRule() {
		return getNewStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" forinit=commaExpr? ";" condition=commaExpr? ";" iterator=commaExpr? ")" command=StatementsBlock | "for" "("
	//	"var" elements+=identifierDeclaration ("," elements+=identifierDeclaration)* ";" condition=commaExpr? ";"
	//	iterator=commaExpr? ")" command=StatementsBlock | "for" "each"? "(" nameForin=ID "in" forinexpr=Expression ")"
	//	forcommand=StatementsBlock | "for" "each"? "(" "var" nameForeachh=ID relation=typeRelation? "in"
	//	foreachexpr=Expression ")" foreachcommand=StatementsBlock;
	public ForStatementElements getForStatementAccess() {
		return (pForStatement != null) ? pForStatement : (pForStatement = new ForStatementElements());
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//identifierDeclaration:
	//	name=ID relation=typeRelation? ("=" expr=exprOrObjectLiteral)?;
	public IdentifierDeclarationElements getIdentifierDeclarationAccess() {
		return (pIdentifierDeclaration != null) ? pIdentifierDeclaration : (pIdentifierDeclaration = new IdentifierDeclarationElements());
	}
	
	public ParserRule getIdentifierDeclarationRule() {
		return getIdentifierDeclarationAccess().getRule();
	}

	//commaExpr:
	//	elements+=Expression ("," elements+=Expression)*;
	public CommaExprElements getCommaExprAccess() {
		return (pCommaExpr != null) ? pCommaExpr : (pCommaExpr = new CommaExprElements());
	}
	
	public ParserRule getCommaExprRule() {
		return getCommaExprAccess().getRule();
	}

	//DoWhileStatement:
	//	{While} "do" whileBlock=StatementsBlock "while" cond=parenthesizedExpr ";";
	public DoWhileStatementElements getDoWhileStatementAccess() {
		return (pDoWhileStatement != null) ? pDoWhileStatement : (pDoWhileStatement = new DoWhileStatementElements());
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//WhileStatement:
	//	{While} "while" cond=parenthesizedExpr whileBlock=StatementsBlock;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//SwitchStatement:
	//	{Switch} "switch" cond=parenthesizedExpr "{" cases+=statementInSwitch* "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return (pSwitchStatement != null) ? pSwitchStatement : (pSwitchStatement = new SwitchStatementElements());
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//parenthesizedExpr:
	//	"(" expression=exprOrObjectLiteral ")";
	public ParenthesizedExprElements getParenthesizedExprAccess() {
		return (pParenthesizedExpr != null) ? pParenthesizedExpr : (pParenthesizedExpr = new ParenthesizedExprElements());
	}
	
	public ParserRule getParenthesizedExprRule() {
		return getParenthesizedExprAccess().getRule();
	}

	//statementInSwitch:
	//	Statement | "case" Expression ":" | "default" ":";
	public StatementInSwitchElements getStatementInSwitchAccess() {
		return (pStatementInSwitch != null) ? pStatementInSwitch : (pStatementInSwitch = new StatementInSwitchElements());
	}
	
	public ParserRule getStatementInSwitchRule() {
		return getStatementInSwitchAccess().getRule();
	}

	//Return:
	//	"return" expression=Expression ";";
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//VariableDeclaration:
	//	access=AccessLevel? "static"? "var" name=ID ":" type=VarType ("=" expression=Expression)? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VarType:
	//	"void" | "*" | type=[Class|QualifiedName];
	public VarTypeElements getVarTypeAccess() {
		return (pVarType != null) ? pVarType : (pVarType = new VarTypeElements());
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" expression=Expression ")" thenBlock=IfBlock ("else" elseBlock=IfBlock)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//TryStatement:
	//	"try" "{" statements+=Statement+ "}" ("catch" "(" params+=Parameter ")")? ("finally" finallyBlock=StatementsBlock)?;
	public TryStatementElements getTryStatementAccess() {
		return (pTryStatement != null) ? pTryStatement : (pTryStatement = new TryStatementElements());
	}
	
	public ParserRule getTryStatementRule() {
		return getTryStatementAccess().getRule();
	}

	//IfBlock:
	//	statements+=Statement | StatementsBlock;
	public IfBlockElements getIfBlockAccess() {
		return (pIfBlock != null) ? pIfBlock : (pIfBlock = new IfBlockElements());
	}
	
	public ParserRule getIfBlockRule() {
		return getIfBlockAccess().getRule();
	}

	//StatementsBlock:
	//	"{" statements+=Statement* "}";
	public StatementsBlockElements getStatementsBlockAccess() {
		return (pStatementsBlock != null) ? pStatementsBlock : (pStatementsBlock = new StatementsBlockElements());
	}
	
	public ParserRule getStatementsBlockRule() {
		return getStatementsBlockAccess().getRule();
	}

	//Block:
	//	MethodBody | IfBlock;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Parameter:
	//	"const"? name=ID rel=typeRelation? ("=" lit=exprOrObjectLiteral)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Parameters:
	//	(elements+=Parameter ("," elements+=Parameter)*)? | (elements+=Parameter ("," elements+=Parameter)* ",")? name=ID
	//	rel=typeRelation?;
	public ParametersElements getParametersAccess() {
		return (pParameters != null) ? pParameters : (pParameters = new ParametersElements());
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//typeRelation:
	//	":" ("void" | type=[Class|QualifiedName]);
	public TypeRelationElements getTypeRelationAccess() {
		return (pTypeRelation != null) ? pTypeRelation : (pTypeRelation = new TypeRelationElements());
	}
	
	public ParserRule getTypeRelationRule() {
		return getTypeRelationAccess().getRule();
	}

	//objectLiteral:
	//	"{" objectFields "}";
	public ObjectLiteralElements getObjectLiteralAccess() {
		return (pObjectLiteral != null) ? pObjectLiteral : (pObjectLiteral = new ObjectLiteralElements());
	}
	
	public ParserRule getObjectLiteralRule() {
		return getObjectLiteralAccess().getRule();
	}

	//objectFields:
	//	fields+=objectField ("," fields+=objectField)*;
	public ObjectFieldsElements getObjectFieldsAccess() {
		return (pObjectFields != null) ? pObjectFields : (pObjectFields = new ObjectFieldsElements());
	}
	
	public ParserRule getObjectFieldsRule() {
		return getObjectFieldsAccess().getRule();
	}

	//objectField:
	//	ID ":" exprOrObjectLiteral | STRING ":" exprOrObjectLiteral | INT ":" exprOrObjectLiteral;
	public ObjectFieldElements getObjectFieldAccess() {
		return (pObjectField != null) ? pObjectField : (pObjectField = new ObjectFieldElements());
	}
	
	public ParserRule getObjectFieldRule() {
		return getObjectFieldAccess().getRule();
	}

	//exprOrObjectLiteral:
	//	Expression | objectLiteral;
	public ExprOrObjectLiteralElements getExprOrObjectLiteralAccess() {
		return (pExprOrObjectLiteral != null) ? pExprOrObjectLiteral : (pExprOrObjectLiteral = new ExprOrObjectLiteralElements());
	}
	
	public ParserRule getExprOrObjectLiteralRule() {
		return getExprOrObjectLiteralAccess().getRule();
	}

	//Symbol:
	//	VariableDeclaration | Parameter;
	public SymbolElements getSymbolAccess() {
		return (pSymbol != null) ? pSymbol : (pSymbol = new SymbolElements());
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}

	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment returns Expression:
	//	SelectionExpression ({Assignment.left=current} "=" right=Expression)?;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//SelectionExpression returns Expression:
	//	TerminalExpression ({MemberSelection.receiver=current} "." member=[Member] (methodinvocation?="(" (args+=Expression
	//	("," args+=Expression)*)? ")")?)*;
	public SelectionExpressionElements getSelectionExpressionAccess() {
		return (pSelectionExpression != null) ? pSelectionExpression : (pSelectionExpression = new SelectionExpressionElements());
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	{StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {This} "this" |
	//	{Super} "super" | {Null} "null" | {Undefined} "undefined" | {SymbolRef} symbol=[Symbol] | {TerminalOp}
	//	TerminalOperator | "(" Expression ")";
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//TerminalOperator:
	//	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "?:" | "||" | "&&" | "|" | "^"
	//	| "&" | "==" | "!=" | "===" | "!==" | "<" | ">" | "<=" | ">=" | "as" | "in" | "instanceof" | "is" | "<<" | ">>" |
	//	">>>" | "+" | "-" | "*" | "/" | "%" | "++" | "--" | "!" | "~" | "typeof" | "." | "::" | "?" | ":";
	public TerminalOperatorElements getTerminalOperatorAccess() {
		return (pTerminalOperator != null) ? pTerminalOperator : (pTerminalOperator = new TerminalOperatorElements());
	}
	
	public ParserRule getTerminalOperatorRule() {
		return getTerminalOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
