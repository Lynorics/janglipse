/*
* generated by Xtext
*/
package de.lynorics.eclipse.jangaroo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AS3GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionScriptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	PackageDeclaration | ActionScript;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration | ActionScript
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//ActionScript
		public RuleCall getActionScriptParserRuleCall_1() { return cActionScriptParserRuleCall_1; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElemntsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElemntsActionScriptParserRuleCall_3_0 = (RuleCall)cElemntsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" elemnts+=ActionScript "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" elemnts+=ActionScript "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elemnts+=ActionScript
		public Assignment getElemntsAssignment_3() { return cElemntsAssignment_3; }

		//ActionScript
		public RuleCall getElemntsActionScriptParserRuleCall_3_0() { return cElemntsActionScriptParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//ActionScript:
		//	imports+=Import* elements+=Type+;
		public ParserRule getRule() { return rule; }

		//imports+=Import* elements+=Type+
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=Type+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Type
		public RuleCall getElementsTypeParserRuleCall_1_0() { return cElementsTypeParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIPackageDeclarationParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importURI=PackageDeclaration ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=PackageDeclaration ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=PackageDeclaration
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//PackageDeclaration
		public RuleCall getImportURIPackageDeclarationParserRuleCall_1_0() { return cImportURIPackageDeclarationParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVisibilityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cClassParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariablesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	Visibility? Class | Function | Variables;
		public ParserRule getRule() { return rule; }

		//Visibility? Class | Function | Variables
		public Alternatives getAlternatives() { return cAlternatives; }

		//Visibility? Class
		public Group getGroup_0() { return cGroup_0; }

		//Visibility?
		public RuleCall getVisibilityParserRuleCall_0_0() { return cVisibilityParserRuleCall_0_0; }

		//Class
		public RuleCall getClassParserRuleCall_0_1() { return cClassParserRuleCall_0_1; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }

		//Variables
		public RuleCall getVariablesParserRuleCall_2() { return cVariablesParserRuleCall_2; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVisibilityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cVariablesParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	Visibility? Variables | Function;
		public ParserRule getRule() { return rule; }

		//Visibility? Variables | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//Visibility? Variables
		public Group getGroup_0() { return cGroup_0; }

		//Visibility?
		public RuleCall getVisibilityParserRuleCall_0_0() { return cVisibilityParserRuleCall_0_0; }

		//Variables
		public RuleCall getVariablesParserRuleCall_0_1() { return cVariablesParserRuleCall_0_1; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}

	public class VisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Visibility:
		//	"public" | "private";
		public ParserRule getRule() { return rule; }

		//"public" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"private"
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperClassClassCrossReference_2_1_0 = (CrossReference)cSuperClassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperClassClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperClassClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	"class" name=ID ("extends" superClass=[Class])? "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" superClass=[Class])? "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superClass=[Class])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superClass=[Class]
		public Assignment getSuperClassAssignment_2_1() { return cSuperClassAssignment_2_1; }

		//[Class]
		public CrossReference getSuperClassClassCrossReference_2_1_0() { return cSuperClassClassCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperClassClassIDTerminalRuleCall_2_1_0_1() { return cSuperClassClassIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	"function" name=ID "(" ")" "{" "}";
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" ")" "{" "}"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variables");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUNITParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall c_StringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cVarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall c_intParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cVarKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//Variables:
		//	"var" UNIT | "var" _String | "var" _int | "var" number;
		public ParserRule getRule() { return rule; }

		//"var" UNIT | "var" _String | "var" _int | "var" number
		public Alternatives getAlternatives() { return cAlternatives; }

		//"var" UNIT
		public Group getGroup_0() { return cGroup_0; }

		//"var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//UNIT
		public RuleCall getUNITParserRuleCall_0_1() { return cUNITParserRuleCall_0_1; }

		//"var" _String
		public Group getGroup_1() { return cGroup_1; }

		//"var"
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }

		//_String
		public RuleCall get_StringParserRuleCall_1_1() { return c_StringParserRuleCall_1_1; }

		//"var" _int
		public Group getGroup_2() { return cGroup_2; }

		//"var"
		public Keyword getVarKeyword_2_0() { return cVarKeyword_2_0; }

		//_int
		public RuleCall get_intParserRuleCall_2_1() { return c_intParserRuleCall_2_1; }

		//"var" number
		public Group getGroup_3() { return cGroup_3; }

		//"var"
		public Keyword getVarKeyword_3_0() { return cVarKeyword_3_0; }

		//number
		public RuleCall getNumberParserRuleCall_3_1() { return cNumberParserRuleCall_3_1; }
	}

	public class UNITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUnitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cString0x000000Keyword_3_1_0 = (Keyword)cStringAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UNIT:
		//	Name=ID ":" "unit" ("=" String="0x000000")? ";";
		public ParserRule getRule() { return rule; }

		//Name=ID ":" "unit" ("=" String="0x000000")? ";"
		public Group getGroup() { return cGroup; }

		//Name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"unit"
		public Keyword getUnitKeyword_2() { return cUnitKeyword_2; }

		//("=" String="0x000000")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//String="0x000000"
		public Assignment getStringAssignment_3_1() { return cStringAssignment_3_1; }

		//"0x000000"
		public Keyword getString0x000000Keyword_3_1_0() { return cString0x000000Keyword_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class _StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "_String");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cStringKeyword_3_1_0 = (Keyword)cStringAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//_String:
		//	Name=ID ":" "String" ("=" String=""?)? ";";
		public ParserRule getRule() { return rule; }

		//Name=ID ":" "String" ("=" String=""?)? ";"
		public Group getGroup() { return cGroup; }

		//Name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"String"
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }

		//("=" String=""?)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//String=""?
		public Assignment getStringAssignment_3_1() { return cStringAssignment_3_1; }

		//""
		public Keyword getStringKeyword_3_1_0() { return cStringKeyword_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class _intElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "_int");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cInt0Keyword_3_1_0 = (Keyword)cIntAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//_int:
		//	Name=ID ":" "int" ("=" int="0")? ";";
		public ParserRule getRule() { return rule; }

		//Name=ID ":" "int" ("=" int="0")? ";"
		public Group getGroup() { return cGroup; }

		//Name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//("=" int="0")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//int="0"
		public Assignment getIntAssignment_3_1() { return cIntAssignment_3_1; }

		//"0"
		public Keyword getInt0Keyword_3_1_0() { return cInt0Keyword_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDoubleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cDouble0Keyword_3_1_0 = (Keyword)cDoubleAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//number:
		//	Name=ID ":" "Number" ("=" double="0")? ";";
		public ParserRule getRule() { return rule; }

		//Name=ID ":" "Number" ("=" double="0")? ";"
		public Group getGroup() { return cGroup; }

		//Name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"Number"
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }

		//("=" double="0")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//double="0"
		public Assignment getDoubleAssignment_3_1() { return cDoubleAssignment_3_1; }

		//"0"
		public Keyword getDouble0Keyword_3_1_0() { return cDouble0Keyword_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private PackageDeclarationElements pPackageDeclaration;
	private ActionScriptElements pActionScript;
	private ImportElements pImport;
	private TypeElements pType;
	private PropertyElements pProperty;
	private VisibilityElements pVisibility;
	private ClassElements pClass;
	private FunctionElements pFunction;
	private VariablesElements pVariables;
	private UNITElements pUNIT;
	private _StringElements p_String;
	private _intElements p_int;
	private NumberElements pNumber;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AS3GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.lynorics.eclipse.jangaroo.AS3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	PackageDeclaration | ActionScript;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" elemnts+=ActionScript "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//ActionScript:
	//	imports+=Import* elements+=Type+;
	public ActionScriptElements getActionScriptAccess() {
		return (pActionScript != null) ? pActionScript : (pActionScript = new ActionScriptElements());
	}
	
	public ParserRule getActionScriptRule() {
		return getActionScriptAccess().getRule();
	}

	//Import:
	//	"import" importURI=PackageDeclaration ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Type:
	//	Visibility? Class | Function | Variables;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Property:
	//	Visibility? Variables | Function;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Visibility:
	//	"public" | "private";
	public VisibilityElements getVisibilityAccess() {
		return (pVisibility != null) ? pVisibility : (pVisibility = new VisibilityElements());
	}
	
	public ParserRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//Class:
	//	"class" name=ID ("extends" superClass=[Class])? "{" properties+=Property* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Function:
	//	"function" name=ID "(" ")" "{" "}";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Variables:
	//	"var" UNIT | "var" _String | "var" _int | "var" number;
	public VariablesElements getVariablesAccess() {
		return (pVariables != null) ? pVariables : (pVariables = new VariablesElements());
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}

	//UNIT:
	//	Name=ID ":" "unit" ("=" String="0x000000")? ";";
	public UNITElements getUNITAccess() {
		return (pUNIT != null) ? pUNIT : (pUNIT = new UNITElements());
	}
	
	public ParserRule getUNITRule() {
		return getUNITAccess().getRule();
	}

	//_String:
	//	Name=ID ":" "String" ("=" String=""?)? ";";
	public _StringElements get_StringAccess() {
		return (p_String != null) ? p_String : (p_String = new _StringElements());
	}
	
	public ParserRule get_StringRule() {
		return get_StringAccess().getRule();
	}

	//_int:
	//	Name=ID ":" "int" ("=" int="0")? ";";
	public _intElements get_intAccess() {
		return (p_int != null) ? p_int : (p_int = new _intElements());
	}
	
	public ParserRule get_intRule() {
		return get_intAccess().getRule();
	}

	//number:
	//	Name=ID ":" "Number" ("=" double="0")? ";";
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
