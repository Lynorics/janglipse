/*
* generated by Xtext
*/
package de.lynorics.eclipse.jangaroo.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.lynorics.eclipse.jangaroo.services.AS3GrammarAccess;

public class AS3Parser extends AbstractContentAssistParser {
	
	@Inject
	private AS3GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.lynorics.eclipse.jangaroo.ui.contentassist.antlr.internal.InternalAS3Parser createParser() {
		de.lynorics.eclipse.jangaroo.ui.contentassist.antlr.internal.InternalAS3Parser result = new de.lynorics.eclipse.jangaroo.ui.contentassist.antlr.internal.InternalAS3Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getVariablesAccess().getAlternatives(), "rule__Variables__Alternatives");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getActionScriptAccess().getGroup(), "rule__ActionScript__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getPropertyAccess().getGroup_0(), "rule__Property__Group_0__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getVariablesAccess().getGroup_0(), "rule__Variables__Group_0__0");
					put(grammarAccess.getVariablesAccess().getGroup_1(), "rule__Variables__Group_1__0");
					put(grammarAccess.getVariablesAccess().getGroup_2(), "rule__Variables__Group_2__0");
					put(grammarAccess.getVariablesAccess().getGroup_3(), "rule__Variables__Group_3__0");
					put(grammarAccess.getUNITAccess().getGroup(), "rule__UNIT__Group__0");
					put(grammarAccess.getUNITAccess().getGroup_3(), "rule__UNIT__Group_3__0");
					put(grammarAccess.get_StringAccess().getGroup(), "rule___String__Group__0");
					put(grammarAccess.get_StringAccess().getGroup_3(), "rule___String__Group_3__0");
					put(grammarAccess.get_intAccess().getGroup(), "rule___int__Group__0");
					put(grammarAccess.get_intAccess().getGroup_3(), "rule___int__Group_3__0");
					put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
					put(grammarAccess.getNumberAccess().getGroup_3(), "rule__Number__Group_3__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getElemntsAssignment_3(), "rule__PackageDeclaration__ElemntsAssignment_3");
					put(grammarAccess.getActionScriptAccess().getImportsAssignment_0(), "rule__ActionScript__ImportsAssignment_0");
					put(grammarAccess.getActionScriptAccess().getElementsAssignment_1(), "rule__ActionScript__ElementsAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getSuperClassAssignment_2_1(), "rule__Class__SuperClassAssignment_2_1");
					put(grammarAccess.getClassAccess().getPropertiesAssignment_4(), "rule__Class__PropertiesAssignment_4");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getUNITAccess().getNameAssignment_0(), "rule__UNIT__NameAssignment_0");
					put(grammarAccess.getUNITAccess().getStringAssignment_3_1(), "rule__UNIT__StringAssignment_3_1");
					put(grammarAccess.get_StringAccess().getNameAssignment_0(), "rule___String__NameAssignment_0");
					put(grammarAccess.get_StringAccess().getStringAssignment_3_1(), "rule___String__StringAssignment_3_1");
					put(grammarAccess.get_intAccess().getNameAssignment_0(), "rule___int__NameAssignment_0");
					put(grammarAccess.get_intAccess().getIntAssignment_3_1(), "rule___int__IntAssignment_3_1");
					put(grammarAccess.getNumberAccess().getNameAssignment_0(), "rule__Number__NameAssignment_0");
					put(grammarAccess.getNumberAccess().getDoubleAssignment_3_1(), "rule__Number__DoubleAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.lynorics.eclipse.jangaroo.ui.contentassist.antlr.internal.InternalAS3Parser typedParser = (de.lynorics.eclipse.jangaroo.ui.contentassist.antlr.internal.InternalAS3Parser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AS3GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AS3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
