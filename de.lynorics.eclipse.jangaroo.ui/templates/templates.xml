<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates>
<template
		id="JANGLIPSE_AS_CLASS" 
		autoinsert="true"
		context="de.lynorics.eclipse.jangaroo.AS3.Model"
		deleted="false"
		description="Class template"
		enabled="true"
		name="Class">
package ${PackageName} {

/**
 * Entity ${EntityName}
 *
 * @author ${user}
 */
public class ${EntityName} {

	/**
	 * Default constructor for ${EntityName}.
	 */
	public function ${EntityName}() {
		${cursor}
	}

}
}
</template>
<template
		id="JANGLIPSE_AS_INTERFACE" 
		autoinsert="true"
		context="de.lynorics.eclipse.jangaroo.AS3.Model"
		deleted="false"
		description="Interface template"
		enabled="true"
		name="Interface">
package ${PackageName} {

/**
 * Interface ${EntityName}
 *
 * @author ${user}
 */
public interface ${EntityName} {

	${cursor}

}
}
</template>
<template
		id="JANGLIPSE_AS_ENUM" 
		autoinsert="true"
		context="de.lynorics.eclipse.jangaroo.AS3.Model"
		deleted="false"
		description="Class template for an enum"
		enabled="true"
		name="Enum">
package ${PackageName} {

/**
 * Enum ${EnumName}
 * @author ${user}
 */
public class ${EnumName} extends Enum {

    public static const FOO:${EnumName} = new ${EnumName}();

    /**
     * An array containing all ${EnumName} enums.
     */
    [ArrayElementType("${PackageName}${EnumName}")]
    public static const values:Array = collectValues(${EnumName});
    
    /**
     * Return the ${EnumName} with the given name.
     *
     * @param name the name of the ${EnumName}
     * @return the ${EnumName}
     */
    public static function named(name:String):${EnumName} {
      return namedIn(name, ${EnumName});
    }

    function ${EnumName}() {
    } 
}
}
</template>
<template
		id="JANGLIPSE_EXT_AS_COMPONENT" 
		autoinsert="true"
		context="de.lynorics.eclipse.jangaroo.AS3.Model"
		deleted="false"
		description="Class template for an Ext AS component"
		enabled="true"
		name="ExtASComponent">
package ${PackageName} {

import ext.Ext;

public class ${ComponentName} extends ${Super_class_name} {

  public function ${ComponentName}(config:${Config_class_name} = null) {
    super(${Config_class_name}(Ext.apply({
      ${cursor}
    }, config)));
  }
}
}
</template>
<template
		id="JANGLIPSE_EXT_AS_COMPONENT_CONFIG" 
		autoinsert="true"
		context="de.lynorics.eclipse.jangaroo.AS3.Model"
		deleted="false"
		description="Class template for an Ext AS component configuration"
		enabled="true"
		name="ExtASComponentConfig">
package ${PackageName} {

import ext.Ext;
import ${Super_config_class_name};

[ExtConfig(target="${Component_class}", xtype)]
public class ${ComponentConfigName} extends ${Super_config_class_name} {

  public static native function get xtype():String;

  public function ${ComponentConfigName}(config:Object = null) {
    super(config || {});
  }

  public native function get attribute():String;

  public native function set attribute(value:String):void;
}
}
</template>
<template
	id="JANGLIPSE_FUNCTION"
	name="function"
	autoinsert="false"
	context="de.lynorics.eclipse.jangaroo.AS3.Method"
	deleted="false"
	description="Function expression"
	enabled="true">
function ${name}(${}):${void:CrossReference(avm.AvmDeclaredTypeReference.type)} {
	${cursor}
}
</template>
</templates>